/ 
/ $Header: pcbeus.msg 18-apr-2008.11:02:23 nikeda Exp $ 
/ 
/ Copyright (c) 1991, 1996, 1997, 1998, 1999 by Oracle Corporation 
/   NAME
/     pcbeus.msg
/   DESCRIPTION
/     Contains error msgs generated by PRO*
/   NOTES
/   MODIFIED   (MM/DD/YY)
/  nikeda     04/18/08 - [6964328] disable semantic checking for TimesTen
/  nikeda     12/10/07 - New option
/  skmenon    03/20/07 - [5667416] fileid option 
/  skmenon    07/20/06 - [5403026] Change DB2 array message
/  kchintak   06/20/06 - [OUTLINE] Support for plan stability
/  skmenon    06/14/06 - [Proj#20930 db2] Support of DB2 array syntax.
/  nikeda     06/13/06 - [BUFINS] new command line options 
/  kchintak   05/23/06 - [20930 Endianness] Platform endianness support. 
/  kchintak   05/11/06 - [PID 18317] Message for common_parser cmdline option.
/  skmenon    05/15/06 - Statement caching
/  debanerj   04/05/05 - Variable format support for Pro*Cobol
/  kchintak   04/04/05 - Add messages for charset_picn, charset_picx command 
/                        line options. 
/  losborne   01/08/99 - Add eol_padding option
/  losborne   10/28/98 - Correct max descriptor error
/  mjogleka   08/17/98 - #(639926) Add nested option
/  losborne   05/28/98 - Fix cause/action for 240,241,242
/  nikeda     05/22/98 - Add prefetch cmdline option
/  apopat     05/12/98 - [641092] S9(n), n>SPC_MX_LINTSZ - generate error
/  mjogleka   04/27/98 - lint - call to slsprom
/  mjogleka   04/16/98 - error when unsupported type in exec sql var
/  losborne   04/14/98 - Combine error msgs for using FOR clause where it canno
/  mjogleka   04/09/98 - new write append error
/  losborne   04/08/98 - Test for improper AT and FOR clauses in pcbsqad
/  mjogleka   03/10/98 - move dynamic=ansi error
/  mjogleka   03/03/98 - change wording on lob numeric type messages
/  losborne   02/17/98 - Add errors for GET/SET DESCRIPTOR stmts
/  mjogleka   02/06/98 - add more dynamic sql error msgs
/  mjogleka   02/17/98 - add lob errors
/  mjogleka   02/13/98 - implement lobs
/  mjogleka   01/27/98 - implement dynamic sql92
/  losborne   01/14/98 - Add options DYNAMIC and TYPE_CODE
/  losborne   12/16/97 - Add Cause/Action for last added mesgs
/  losborne   11/12/97 - Implement support for tables of group items
/  mchiocca   11/19/97 - [Optima] Move Command Line Names and Values
/  mjogleka   11/18/97 - remove unparse strings
/  mjogleka   11/03/97 - #(571775) allow replace function in sql stmts
/  mjogleka   11/11/97 - #(286765) add error for mismatch
/  mjogleka   10/23/97 - #(565093) fix occurs with depending clause
/  mjogleka   10/21/97 - fix translation documentation
/  losborne   09/11/97 - Error when EXEC stmts begin before column 12
/  losborne   08/22/97 - MAXLIT error 9 should be warning
/  losborne   08/08/97 - Hint comment immediately follows DELETE keyword
/  losborne   08/01/97 - Add fatal error messages
/  losborne   07/30/97 - Remove V6 compatibility
/  losborne   07/18/97 - Implement COMP1 command line option
/  mchiocca   06/09/97 - [501631] Add space to 'connect by ' message
/  losborne   04/15/97 - Separate msg for invalid scale
/  losborne   04/03/97 - Error for invalid size in  EXEC SQL VAR
/  mjogleka   04/07/97 - convert pro*c examples to pro*cobol
/  mjogleka   04/01/97 - #(473574) do not allow OPEN USING clause with non-dyna
/  mjogleka   03/05/97 - #(447340) fix fips flagging of VARYING vars
/  mjogleka   03/06/97 - #(454796) accept partition clause on a table name
/  losborne   03/05/97 - Fix tokenization of hint comments
/  losborne   03/04/97 - Implement WITH READ ONLY and WITH CHECK OPTION
/  losborne   02/26/97 - Err 235 can't be generated, remove it
/  mjogleka   02/21/97 - #(447340) add some fips flagging errors
/  mjogleka   02/18/97 - #(447337) provide line/col for error 232
/  losborne   01/15/97 - Remove unused messages
/  losborne   12/04/96 - Error mesg for unterminated pseudo-text
/  losborne   11/27/96 - Translation fixes
/  mjogleka   11/26/96 - add remaining cause/actions
/  losborne   11/26/96 - Update cause/actions
/  losborne   11/14/96 - New msgs for unset/invalid NLS_NCHAR
/  mjogleka   11/12/96 - remove error 213
/  mjogleka   11/05/96 - organize message file
/  mjogleka   11/01/96 - add error #22
/  losborne   10/25/96 - Allow DBMS to be set to V8
/  losborne   10/22/96 - Some err msgs when NLS_LOCAL=YES
/  losborne   10/17/96 - Error if group item used outside INTO or VALUES clause
/  losborne   09/25/96 - Err for nested group items
/  losborne   09/20/96 - Add msgs relating to group item host variables
/  losborne   09/18/96 - Add ; to PL/SQL block
/  losborne   09/16/96 - PL/SQL related messages
/  mjogleka   09/16/96 - add host var error messages
/  losborne   09/16/96 - Add some pcbk related messages
/  mjogleka   09/10/96 - move datatype errors
/  mjogleka   08/19/96 - add error messages
/  mjogleka   08/13/96 - add define as inline option
/  losborne   08/06/96 - Err msg for unable to reopen temp file
/  mjogleka   08/05/96 - add wrong type error message
/  losborne   08/05/96 - Add fixed strings for XREF
/  losborne   07/26/96 - Misc changes to SQL symbol table
/  losborne   07/22/96 - Fix severity + category for error 1
/  losborne   07/15/96 - Fix symtab errors
/  mjogleka   07/03/96 - underline all inline notes
/  gturk      06/06/96 - Added fatal msg for unable to open list file
/  gturk      06/05/96 - added unable to open include file error msg
/  losborne   05/13/96 - Implement last of new Pro*COB 2 cmd line opts
/  mjogleka   05/09/96 - add datatype error messages
/  mjogleka   05/02/96 - change 2139
/  mjogleka   04/30/96 - add fixed strings for output generation
/  losborne   04/01/96 - Detect premature end-of-string
/  gturk      03/12/96 - Changed msg format to use second number
/  losborne   03/07/96 - Add symtab error messages
/  losborne   03/05/96 - Add syntax error msg
/  Osborne    09/06/90 - New lines option for Pro*C to produce #line nos
/ 
/       TRANSLATION DOCUMENTATION:
/
/  The following messages are broken down into the following categories:
/
/   1 - 1000: Pro*COBOL Error messages.  These should be translated with
/        some exceptions where a keyword, command line option name or value, 
/        or something similar is mentioned.
/
/   1201 - 1300: Explanatory text for the Pro*COBOL help screen for the 
/        current release of Pro*COBOL.  These should be translated except
/        where option names, values, etc. are mentioned. Words which 
/        should not be translated are marked with "*....*".
/
/   1301 - 1400: Miscellaneous messages for Pro*COBOL.  These should be 
/        translated except where option names, values, etc. are mentioned. 
/        Words which should not be translated are marked with "*....*".
/
/  Restrictions on translations:
/
/   1)  Format strings such as "%s", "%u", etc. are *not* translated.
/
/   2)  Most of the error messages (1-1000) are used as C language format
/       strings and use C formatting (%s, %u, %d, etc.).  The relative
/       order of the formats (%s, etc.) within a particular error message
/       and the phrases that contain them CANNOT be changed without
/       possibly causing a precompiler abort or incorrect information in
/       the error message.  The same situation applies to messages 1301 
/       to 1400.
/
/   3)  Many of the individual words in the messages 1-1000, 1201-1300,
/       1301-1400 are COBOL keywords, SQL keywords, Pro*COBOL command line 
/       option names and values and should *not* be translated.  These 
/       individual words have "*"s underneath them.
/
/   4)  Some terminology is COBOL terminology, such as "Area A" that I am 
/       not sure whether or not it is translated.  The best thing to do here 
/       is to get an American version of a COBOL manual to find out what the
/       term refers to and then to look in a foreign language version of a
/       COBOL manual to see how it is translated.  These are marked 
/       with "L...L".
/
/   5)  Some terms, such as "bind" and "define", are Oracle terms that I do
/       not know if they are translated.  These terms are not marked in
/       any way.  The translator should be generally familiar with the
/       Oracle terminology for the language being translated to.
/
/   ***** - Do not translate this part of otherwise translated text.
/   TTTTT - Translate this part of otherwise untranslated text.
/   LLLLL - COBOL terminology, look in appropriate COBOL manuals for 
/           translations.
/
/
/       SEVERITY AND CATEGORY DOCUMENTATION
/
/    1) The second number represents both severity and category and is derived
/       by multiplying the serverity by 4 and adding the category.  Current
/       values are 
/       Severity                  Category
/       0 - informational         0 - no location information    (command line)
/       1 - warning               1 - line, column and file supplied  (general)
/       2 - severe                2 - location supplied with token     (pxtokn)
/       3 - fatal                 3 - location supplied with idl node   (pcnod)
/
/    2) The error messages are organized using the following categories:
//        1 -  99: command line (option) 
//      100 - 199: file manipulation
//      200 - 299: host variable errors
//      300 - 399: fips flagging errors
//      400 - 499: tokenizer or parsing errors
//      500 - 649: other semantic errors grouped by the following features:
//        threads, result set cursors, miscellaneous, pl/sql, exec tools
//        and lobs.
//      700 - 724: dynamic SQL errors
//      725 - 749: outline errors [OUTLINE]
//      900 - 1000: fatal errors
//
// "1 - 99, Command line (options) errors"
//
1,8, "%s"
// *Cause: This is a generic error message from the command-line processor.
// *Action: Correct the indicated error.
2,8, "Command line processor severe error"
// *Cause: The command line processor encountered a severe error.
// *Action: After making sure that all the command-line options are specified
//          correctly, call customer support with a full account of all the
//          options and configuration files used.
3,8, "Value of DBMS option invalid with given value of MODE option"
/              ****                                    ****
// *Cause: When MODE={ANSI14 | ANSI13}, DBMS=V7 or V8 was specified, or when
//         MODE=ANSI, DBMS=v6 was specified.  These option settings are
//         incompatible.  Note that the DBMS option was not available before
//         release 1.5 of the Oracle Precompilers.
// *Action: With DBMS=V7 or V8, instead of MODE={ANSI14 | ANSI13}, specify
//          MODE={ANSI | ORACLE}.  With DBMS=V6, instead of MODE=ANSI,
//          specify MODE={ANSI14 | ANSI13 | ORACLE}, but MODE=ORACLE is
//          recommended.
4,8, "UNSAFE_NULL=YES must be used with DBMS=V7 or V8 and MODE=ORACLE"
/     ***************                   *******    **     ***********
// *Cause: The option UNSAFE_NULL=YES has been used with DBMS=V6 or
//         DBMS=NATIVE (the default) or has been used with
//         MODE=ANSI/ANSI14/ANSI13.
// *Action: Use DBMS=V7 or V8 and MODE=ORACLE (the default) when using
//         UNSAFE_NULL=YES or do not use UNSAFE_NULL=YES.
5,0, "Command line option MODE=ANSI required with option NLS_LOCAL=YES"
/                         *********                      *************
// *Cause: The precompiler option NLS_LOCAL=YES was used without also
//         specifying MODE=ANSI.  The precompiler option MODE=ANSI must be
//         specifiied if NLS_LOCAL=YES.
// *Action: Set the precompiler option MODE=ANSI in addition to NLS_LOCAL=YES
//          or do not set NLS_LOCAL=YES.
/
6,4, "Userid only used when SQLCHECK=FULL, userid ignored."
/                           *************
// *Cause: The USERID option was specified when SQLCHECK={SYNTAX | NONE}.  This
//         is unnecessary.
// *Action: Specify the USERID option only when SQLCHECK=SEMANTICS.
7,11, "%s"
// *Cause: This is a generic error message from the command-line processor.
// *Action: Correct the indicated error.
8,11,  "Must use option SQLCHECK=SEMANTICS(FULL) when there is embedded PL/SQL"
/                       ************************                        ******
// *Cause: The precompiler tried to parse an embedded PL/SQL block when
//         SQLCHECK={SYNTAX | NONE}.  PL/SQL blocks can be parsed only when
//         SQLCHECK=SEMANTICS is specified.
// *Action: Remove the PL/SQL block or specify SQLCHECK=SEMANTICS.
9,7,  "Cannot change MAXLITERAL after an EXEC SQL statement"
/                     **********          ********
// *Cause: The MAXLITERAL option has been used in an inline EXEC ORACLE OPTION
//         statement after and EXEC SQL, EXEC TOOLS, or EXEC IAF statement.
//         This is not allowed.
// *Action: Use the MAXLITERAL option only on the command line or in an EXEC
//          ORACLE OPTION statement placed at the beginning of the input source
//          file.
10,7,  "SQLCHECK value in EXEC ORACLE statement exceeds command line value"
/       ********          ***********
// *Cause: The SQLCHECK option was entered inline and specified a level of
//         checking higher than the level specified (or accepted by default) on
//         the command line.  This is not allowed.  For example, if
//         SQLCHECK={SYNTAX | LIMITED} is specified on the command line,
//         SQLCHECK={SEMANTICS | FULL} cannot be specified inline.  This
//         informational message is;  the precompiler ignores the inline
//         value and continues processing.
// *Action: Revise the EXEC ORACLE statement or specify a lower level of
//          checking on the command line.
11,4, "DBMS=V6 no longer supported; using DBMS=NATIVE"
/      *******                            ***********
// *Cause: V6 compatibility is no longer supported.  The precompiler will
//         precompile as though DBMS=NATIVE was specified.
// *Action: Revise the specified DBMS option value from v6 to another value
//          as desired.
12,0, "Command line option DYNAMIC=ANSI required with option TYPE_CODE=ANSI"
/                          ************                      **************
// *Cause: The precompiler option TYPE_CODE=ANSI was used without also
//         specifying DYNAMIC=ANSI.  The precompiler option 
//         DYNAMIC=ANSI must be specifiied if TYPE_CODE=ANSI.
// *Action: Set the precompiler option DYNAMIC=ANSI in addition 
//          to TYPE_CODE=ANSI or do not set TYPE_CODE=ANSI.
13,12,  "Must use option SQLCHECK=SEMANTICS(FULL) when option OUTLINE is used"
/                        ************************             *******
// *Cause: The precompiler option OUTLINE was used without also
//         specifying SQLCHECK=SEMANTICS(FULL).  
// *Action: Set the precompiler option SQLCHECK=SEMANTICS(FULL).
14,12,  "Must use option OUTLINE when option OUTLNPREFIX is used"
/                        *******             ************
// *Cause: The precompiler option OUTLNPREFIX was used without also
//         specifying OUTLINE=YES|<category_name>.  The precompiler option
//         OUTLINE must be specifiied if OUTLNPREFIX is used.
// *Action: Set the precompiler option OUTLINE=YES|<category_name> 
15,12,  "Must use option OUTLINE when option RUNOUTLINE is used"
/                        *******             **********
// *Cause: The precompiler option RUNOUTLINE was used without also
//         specifying OUTLINE=YES|<category_name>.  The precompiler option
//         OUTLINE must be specifiied if RUNOUTLINE is used.
// *Action: Set the precompiler option OUTLINE=YES|<category_name>
16,0,  "Semantic checking disabled by TimesTen."
/
// *Cause: Semantic checking is not supported by TimesTen.
// *Action: This is an informational message only.
/
//
// "100 - 199, File manipulation errors"
//
100, 12, "Unable to reopen temporary file %s"
// *Cause: The precompiler was unable to reopen a temporary file.
//         Some possible causes follow:
//           o File access privileges are insufficient.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that sufficient privileges have been granted to access
//          the file, and that it is not locked by another user.  Also check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).  
101,4, "Could not find or open system configuration file"
// *Cause: The precompiler was unable to open the system configuration file.
//         The system configuration file does not exist or is not in the
//         proper directory.
// *Action: Check that the system configuration file is in the proper
//          directory.  See Oracle installation documentation for where this
//          should be.  Put a new copy of pcccob.cfg with desired default
//          options in the proper directory.
102,8, "Input file name length exceeds the maximum length"
// *Cause: The file name length specified exceeded the maximum length.  Some
//         operating systems have a maximum file name length. 
// *Action: Use a file name of length less than or equal to the maximum
//          platform specific file name length.
/103  Message removed, number may be reused.
103, 8, "Unable to open generated outline sql file \"%s\""
/                                 *******
// *Cause: The precompiler was unable to open the input file specified in the
//         INCLUDE statement.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File access privileges are insufficient.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges to access the file have been
//          granted, and that it is not locked by another user.  Also, check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).
104,8, "Unable to open input file \"%s\""
// *Cause: The precompiler was unable to open the input file specified by the
//         INAME precompiler option.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File access privileges are insufficient.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges have been granted to access the
//          file, and that it is not locked by another user.  Also check that
//          there is enough disk space and that the limit for open files is
//          set high enough (check with the system manager).
105, 9, "Included file name \"%s\" exceeds name limit of %d characters"
// *Cause: The file name length specified exceeded the maximum length.  Some
//         operating systems have a maximum file name length. 
// *Action: Use a file name of length less than or equal to the maximum
//          platform specific file name length.
106, 9, "Unable to open INCLUDE file \"%s\""
/                       *******
// *Cause: The precompiler was unable to open the input file specified in the
//         INCLUDE statement.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File access privileges are insufficient.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges to access the file have been
//          granted, and that it is not locked by another user.  Also, check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).
/107  Message removed, number may be reused.
107, 8, "Unable to open generated outline log file \"%s\"" 
/                                 *******
// *Cause: The precompiler was unable to open the input file specified in the
//         INCLUDE statement.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File access privileges are insufficient.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges to access the file have been
//          granted, and that it is not locked by another user.  Also, check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).
108, 12, "Unable to open list file \"%s\"" 
// *Cause: The precompiler was unable to open the list file specified by the
//         LNAME precompiler option.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File acces privileges are insufficient.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges have been granted to access
//          the file, and that it is not locked by another user.  Also check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).  If a listing
//          file is not needed, specify LTYPE=NONE on the command line.
109, 12, "Unable to open generated source file \"%s\""
// *Cause: The precompiler was unable to open the output file specified by the
//         ONAME precompiler option.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File acces privileges are insufficient.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges have been granted to access
//          the file, and that it is not locked by another user.  Also check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).
110, 12, "Unable to open temporary file \"%s\""
// *Cause: The precompiler was unable to open a file for temporary use.
//         Some possible causes follow:
//           o File acces privileges are insufficient.
//           o A file of the same name already exists and is locked.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that sufficient privileges have been
//          granted to access the file, and that it is not locked.  Also check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).
//
// "200 - 299, Host variable errors."
//
200,11,  "Cannot equivalence PIC N or PIC G variable \"%s\""
/                            *****    *****
// *Cause: A PIC N/G variable, an implicit VARCHAR group item with a PIC N/G
//         elementary item, or a group item with a PIC N/G elementary item 
//         was used in an EXEC SQL VAR statement.  This is not allowed.
// *Action: Do not use the PIC N variable in an EXEC SQL VAR statement.  If
//          you want an equivalence to an Oracle type using an EXEC SQL VAR
//          statement, use a PIC X variable, instead of a PIC N variable.
201,11, "Indicator variable %s not a group item"
/                                    LLLLLLLLLL
// *Cause: The host variable is a group item containing tables.  Indicator
//         variables used with this type of host variable must be group items
//         of tables of indicators corresponding the the tables in the group
//         item host variable.
// *Action: Change the indicator variable to be a group item of indicator
//          tables.
202,11, "Indicator variable %s not a group item or table"
/                                    LLLLLLLLLL    LLLLL
// *Cause: The host variable is a group item.  Indicator variables used with
//         this type of host variable must be a group item or table of
//         indicator variables.
// *Action: Use a group item or table of indicator variables.
203,11, "Nested group item \"%s\" not supported"
/               LLLLLLLLLL
// *Cause: The variable used as a host variable was a group item which
//         itself contained other group items.
// *Action: Remove any group items from the group item to be used as a host
//          variable.
204,11, "Group items cannot be used except in INTO or VALUES clause"
/        LLLLLLLLLLL                          ****    ******
// *Cause: A group item host variable was used outside of an INTO or VALUES
//         clause.   A group item host variable may be used only in an INTO
//         or VALUES clause.
// *Action: Do not use a group item outside of an INTO or VALUES clause.
205,11, "Cannot use PIC N or PIC G variable in PL/SQL when NLS_LOCAL=YES"
/                   *****    *****             ******      *************
// *Cause: A PIC N or PIC G variable was used in an embedded PL/SQL block
//         when the precompiler option NLS_LOCAL=YES was used.  A PIC N or
//         PIC G variable is not supported in this situation.
// *Action: Do not use the PIC N or PIC G variable within the PL/SQL block or
//         use precompiler option NLS_LOCAL=NO.
206,11, "Cannot use N quoted literal in PL/SQL when NLS_LOCAL=YES"
/                   *                   ******      *************
// *Cause: A \"N\" literal (a literal of the form N'...') was used within
//         a PL/SQL block when the precompiler option NLS_LOCAL=YES was used.
//         N literals are not supported in this situation.
// *Action: Use an ordinary literal (one without the \"N\") within the PL/SQL
//          block or use precompiler option NLS_LOCAL=NO.
207,11, "Invalid use of PIC N or PIC G table variable when NLS_LOCAL=YES"
/                       *****    ***** LLLLL               *************
// *Cause: A PIC N variable was declared using an OCCURS clause.  Tables of
//         PIC N variables are not supported when NLS_LOCAL=YES.
// *Action: Declare the PIC N variable without an OCCURS clause or, do not
//          use the PIC N variable in any SQL statements.

208,11, "Incorrect type for host variable \"%s\""
// *Cause: A variable of unsupported datatype was used in a SQL statement
//         or embedded PL/SQL block.
// *Action: Use a host variable of a supported datatype.
209,11, "Scale is not supported for host variable \"%s\""
// *Cause: A variable whose format does not support scaling was used in 
//         a SQL statement or embedded PL/SQL block.  The following formats
//         do not support scaling:
//           PIC S9(n) COMP
//           PIC S9(n) COMP-4
//           PIC S9(n) COMP-5
//           PIC S9(n) BINARY
//           PIC 9(n)  COMP
// *Action: Remove the scale or use a datatype that support scaling.
210,11, "DISPLAY-1 only allowed with PIC G and PIC N variables \"%s\""
/        *********                   *****     *****
// *Cause: A variable declared with DISPLAY-1 in the usage clause
//         without PIC G or PIC N in the picture clause was used in a SQL 
//         statement.
// *Action: Replace DISPLAY-1 with DISPLAY or change the picture
//          clause to use PIC N or PIC G.
211,11, "VARYING not supported with PIC N or PIC G variable \"%s\""
/        *******                    *****    *****
// *Cause: The keyword VARYING was used in a PIC N variable declaration.
// *Action: Remove the keyword VARYING from the variable declaration.  If you
//          want to declare a PIC N VARCHAR variable, specify the precompiler
//          option VARCHAR=YES and declare the variable as an implicit VARCHAR
//          group item as illustrated by the following example:
//            EXEC SQL BEGIN DECLARE SECTION END-EXEC.
//                ...
//                01  ENAME.
//                    05  ENAME-LEN  PIC S9(4) COMP.
//                    05  ENAME-ARR  PIC N(20).
//                ...
//            EXEC SQL END DECLARE SECTION END-EXEC.
212,11, "PICTURE clause not allowed for host variable \"%s\""
/        *******
// *Cause: A variable declared with a PIC clause and COMP-1 or COMP-2 
//         was used in a SQL statement or embedded PL/SQL block.
// *Action: Remove the PIC clause or use a datatype other than
//          COMP-1 or COMP-2 in the declaration of the variable. 
214,11, "JUSTIFIED clause not allowed for host variable \"%s\""
/        *********
// *Cause: A variable declared with a JUSTIFIED clause was used in a SQL
//         statement or embedded PL/SQL block.
// *Action: Remove the JUSTIFIED clause from the variable declaration.
215,11,"OCCURS TO TIMES clause not allowed for host variable \"%s\""
/       ***************
// *Cause: A variable declared with an OCCURS clause with the TO TIMES 
//         subclause was used in a SQL statement or embedded PL/SQL block.
// *Action: Remove the TO TIMES subclause from the variable declaration.
216,11, "OCCURS ASCENDING/DESCENDING clause not allowed for \"%s\""
/        ***************************
// *Cause: A variable declared with an OCCURS clause with the ASCENDING 
//         or DESCENDING KEY IS subclause was used in a SQL statement
//         or embedded PL/SQL block.
// *Action: Remove the ASCENDING or DESCENDING KEY IS subclause from the 
//          variable declaration.
217,11, "OCCURS INDEXED clause not allowed for host variable \"%s\""
/        **************
// *Cause: A variable declared with an OCCURS INDEXED clause was used in 
//         a SQL statement or embedded PL/SQL block.
// *Action: Remove the OCCURS INDEXED clause from the variable declaration.
218,11, "RENAMES clause not allowed for host variable \"%s\""
/        *******
// *Cause: A variable declared with a RENAMES clause was used in a SQL
//         statement or embedded PL/SQL block. 
// *Action: Remove the RENAMES clause from the declaration.
219,11, "Invalid size specified in EXEC SQL VAR statement"
/                                  ************
// *Cause: A size which is specified which is not valid for the
//         specified data type.
// *Action: Specify a size which is valid for the specified type.
220,11, "Invalid scale specified in EXEC SQL VAR statement"
/                                   ************
// *Cause: A scale which is specified which is not valid for the
//         specified data type.
// *Action: Specify a scale which is valid for the specified type.
221,11,"OCCURS DEPENDING ON clause not allowed for host variable \"%s\""
/       *******************
// *Cause: A variable declared with an OCCURS clause with the DEPENDING ON 
//         subclause was used in a SQL statement or embedded PL/SQL block.
// *Action: Remove the DEPENDING ON subclause from the variable declaration.
222,11, "Size for host variable %s exceeds maximum size"
// *Cause: A variable declared with PIC S9(n), with n greater than what
//         is allowed on the given platform, was used in an embedded sql
//         statement.  On 32 bit machines n must not exceed 9, and on
//         64 bit machines, n must not exceed 18.
// *Action: Use a smaller number in the picture clause that does not exceed
//          the maximum allowed size on your platform or use COMP-3.
223,11, "Undeclared variable \"%s\""
// *Cause: A variable used in a SQL statement was not declared or its name
//         is misspelled or if option DECLARE_SECTION=YES the declaration was
//         not in a DECLARE SECTION.
// *Action: Add or correct the variable declaration.
224,11, "Ambiguously referenced variable \"%s\""
// *Cause: There is more than one variable of the same name and the
//         qualification given was insufficient to determine which variable
//         the reference was to.
// *Action: Use more complete qualification in the variable reference.
225,11, "Undeclared SQL identifier \"%s\""
/                   ***
// *Cause: The name of a descriptor, statement, or cursor was not declared or
//         is misspelled, or was declared as a different kind of SQL
//         identifier.
// *Action: Add or correct the descriptor, statement, or cursor declaration.
226,11, "SQL identifier \"%s\" already defined"
/        ***
// *Cause: The SQL identifier (cursor name, statement name, etc.) has already
//         been defined in another way.
// *Action: Use a different name for this use of the name.
227,11,   "Undeclared indicator variable \"%s\""
// *Cause: An indicator variable used in a SQL statement was not declared in
//         the Declare Section or its name is misspelled.
// *Action: Add or correct the indicator variable declaration.
228,11,   "Invalid group item variable \"%s\""
/                  LLLLLLLLLL
// *Cause: An unacceptable group item variable was used in a SQL statement.
//         or its name is misspelled.
// *Action: Correct the group item variable declaration or its use in
//         the SQL statement.
229,11,   "Indicator variable \"%s\" has wrong type or length"
// *Cause: An indicator variable was not declared in the Declare Section as a
//         2-byte integer.  Indicator variables must be defined as 2-byte
//         integers.
// *Action: Redefine the indicator variable as a 2-byte integer.
230,11,  "Indicator table size must not be less than its host variable"
/                   LLLLL
// *Cause: An host variable table was used with an indicator table declared
//         with a smaller dimension.  For example:
//           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
//            01  EMP-NUM       OCCURS 4 TIMES PIC S9(4) COMP.
//            01  EMP-NUM-IND   OCCURS 2 TIMES PIC S9(4) COMP.
//           EXEC SQL END DECLARE SECTION END-EXEC.
//           ...
//           SELECT ... INTO EMP-NUM:EMP-NUM-IND ...
// *Action: Increase the size of the indicator table.
231,11, "Host and indicator variables may not have the same name."
// *Cause: In an EXEC SQL statement, an indicator variable had the same name
//         as a host variable.  The names of a host variable and its
//         associated indicator variable must be different.  Also, an
//         indicator variable cannot be used as a host variable.
// *Action: Rename the host or indicator variable.
232,5,  "Tables not allowed as input bind variables in SELECT statement"
/        LLLLLL                                        ******
// *Cause: A host table was used in the WHERE clause of a SELECT-INTO 
//         statement or in the SELECT list of a SELECT-INTO statement.
// *Action: Rewrite the SELECT statement without using tables or use a cursor.
233,7,   "Table size mismatch in INTO/USING. Minimum is: %ld"
/         LLLLL                  **********
// *Cause: The size of an table variable in an INTO/USING clause is too small
//         for the number of rows processed.
// *Action: Declare all table variables in the INTO/USING clause to have at
//          least the minimum dimension given.
234,11,   "FOR variable \"%s\" is invalid type"
/          ***
// *Cause: The count variable in a FOR clause has the wrong datatype.  The
//         datatype must be NUMBER or LONG (or be compatible with NUMBER or
//         LONG).
// *Action: Check the declaration and check that the count variable has a
//          datatype of NUMBER or LONG (or a compatible Oracle or host-language
//          datatype).
235,11,  "Table size mismatch in INTO/USING. Minimum is: %ld"
/         LLLLL                  **********
// *Cause: The size of a table variable in an INTO/USING clause of a 
//         dynamic EXECUTE statement has been ARRAYLEN...EXECUTE'd while
//         the other host variable has not and is not a table of dimension 1 
//         or a plain non-table host variable.
//         Example:   01 X PIC X(10) OCCURS 10.
//                    01 Y PIC S9(4) COMP OCCURS 10.
//                    01 Z PIC S9(4) COMP.
//                    ... 
//                    EXEC SQL ARRAYLEN X (DIM) EXECUTE END-EXEC.
//                    ...
//                    EXEC SQL EXECUTE S1 USING :X, :Y END-EXEC.  <-- error
//                    EXEC SQL EXECUTE S1 USING :X, :Z END-EXEC.  <-- ok  
//          Please note that this error differs from 233 in that it is an
//          ERROR not a WARNING.
// *Action: ARRAYLEN...EXECUTE all of the table variables in the INTO/USING 
//          clause or those host variables not ARRAYLEN...EXECUTEd need to be
//          of dimension 1.
236,11,  "Cannot use PIC N/G variable.  NLS_NCHAR not set or set incorrectly."
/                    *******            *********
// *Cause:  To use PIC N or PIC G variables as host variables, both of the
//          environment variables NLS_LANG and NLS_NCHAR must be set with
//          correct values.  One of the following problems has occurred which
//          prevents Pro*COBOL from accepting PIC N and PIC G variables as
//          host variables:
//          1) One or both of NLS_LANG and NLS_NCHAR are not set at all.
//          2) NLS_LANG is not set with a valid language, territory, or
//               character set.
//          3) NLS_NCHAR is not set to a valid NCHAR character set.
//          4) The character set specified by NLS_NCHAR is not a fixed width
//               character set.  Pro*COBOL can only use fixed width character
//               sets for PIC N or PIC G host variables.
// *Action: Set the NLS_NCHAR environment variable to a valid fixed width
//          character set name.  Set NLS_LANG with a valid language, territory,
//          and character set.
237,11, "Declaration of \"%s\" cannot have a level number greater than 48"
// *Cause:  A VARYING or SQL-CURSOR declaration has been encountered which 
//          has the level number greater than 48.
// *Action: Change the level to 48 or less.
238,11, "Element of this table group item host variable cannot be a table"
// *Cause:  A group item that is a table and having an element that
//          is a table was used in a SQL statement.
// *Action: Remove the OCCURS clause from the element of the group item.
239,11, "Element of a table group item indicator cannot be table or group item"
// *Cause:  A group item that is a table and used as an indicator has an
//          element that is a table or group item.
// *Action: Change the nested table or group item in the indicator so that
//          it is an elementary item.
240,11, "Group item containing this host variable cannot be table"
// *Cause: An elementary item belonging to a group item with an OCCURS clause
//          has been referenced.  This is not allowed.
// *Action: Change the elementary item used to an item that is not an
//          element of a table of group items.
241,11, "A host variable is required here"
// *Cause: The COUNT item in the dynamic SQL statement must be a host variable
//          but is not.
// *Action: Use a host variable in the COUNT item of the dynamic SQL
//          statement.
242,11, "A host variable or exact numeric constant is required here"
// *Cause: The particular item in the dynamic SQL statement is required to
//         be a host variable or exact numeric (integer) constant, but is
//         not.
// *Action: Change the item in the dynamic SQL statement to use a host variable
//         or exact numeric constant.
//
//  "300 - 399: FIPS flagging error messages."
//
300,3, "Datatype for host variable not supported by ANSI \"%s\""
/                                                   **** (can be replace by ISO)
// *Cause: An Oracle extension to the ANSI/ISO standard was used.
//         Specifically, aa pointer or nonconforming datatype such as VARCHAR
//         was used.  For example, the offending code might look like:
//           EXEC SQL BEGIN DECLARE SECTION END-EXEC.
//             01  USERNAME          PIC X(10) VARYING.
//           EXEC SQL END DECLARE SECTION END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
301,3,  "Use of non-ANSI function is an  Oracle extension"
/                   ****                 ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a non-ANSI function was used.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use this function.
302,3,  "This statement is not supported by ANSI"
/                                           **** (can be replaced by ISO)
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a nonconforming SQL statement such as PREPARE was
//         used.  For example, the offending code might look like:
//           EXEC SQL PREPARE SQL-STMT FROM :HV END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the nonconforming statement.
303,3,  "Dynamic SQL and PL/SQL are Oracle extensions to ANSI SQL"
/                ***     ******     ******               ********
/                                              (ANSI can be replaced by ISO)
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, dynamic SQL or embedded PL/SQL was used.  For
//         example, the offending code might look like:
//           EXEC SQL EXECUTE
//               BEGIN
//                   SELECT ...
//               END;
//           END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          dynamic SQL or embedded PL/SQL.
304,3,  "Oracle extension to the WHENEVER statement"
/        ******                  ********
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a nonconforming keyword such as NOTFOUND, STOP, RAISE,
//         or DO was used in the WHENEVER statement.  (Note that NOT FOUND is
//         ANSI-compliant.)  For example, the offending code might look like:
//           EXEC SQL WHENEVER SQLERROR STOP END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the nonconforming keyword.
305,3,  "Oracle extension to the COMMIT and ROLLBACK statements"
/        ******                  ******     ********
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the parameter RELEASE, COMMENT, or FORCE were used 
//         in a COMMIT or ROLLBACK statement.  For example, the offending 
//         code might look like:
//           EXEC SQL ROLLBACK RELEASE END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the nonconforming parameter.
306,3,  "CREATE FUNCTION/PROCEDURE/PACKAGE/TRIGGER are Oracle extensions"
/        *****************************************     ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, one of the following statements was used:
//           o CREATE FUNCTION
//           o CREATE PROCEDURE
//           o CREATE PACKAGE
//           o CREATE TRIGGER
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use any of these statements.
307,3,  "DROP TABLE statement is an Oracle extension"
/        **********                 ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the DROP TABLE statement was used.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use the DROP statement.
308,3,  "FOR clause is an Oracle extension"
/        ***              ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the FOR clause was used in an table-processing SQL
//         statement.  For example, the offending code might look like:
//           EXEC SQL FOR :LIMIT INSERT INTO EMP (EMPNO, JOB, DEPTNO)
//               VALUES (:EMPNUM, :JOB, :DEPTNO) END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the FOR clause.
309,3,  "The CONNECT statement is Oracle implementation dependent"
/            *******              ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the CONNECT statement was used to log on to ORACLE.
//         For example, the offending code might look like:
//           EXEC SQL CONNECT :USERNAME IDENTIFIED BY :PSSWORD END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, specify the
//          AUTO_CONNECT command-line option instead of using a CONNECT
//          statement.
310,3,  "AT clause is an Oracle extension"
/        **              ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the AT <db_name> clause was used in a SQL statement.
//         For example, the offending code might look like:
//           EXEC SQL AT oracle3 COMMIT RELEASE END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the AT <db_name> clause.
311,3,  "Datatype equivalencing is an Oracle extension"
/                                     ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the EXEC SQL VAR statement was used.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the EXEC SQL VAR statement.
312,3,  "Keyword WORK required here by ANSI"
/                ****                  **** (can be replaced by ISO)
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the keyword WORK was used in a COMMIT or ROLLBACK
//         statement.  For example, the offending code might look like:
//           EXEC SQL COMMIT WORK RELEASE END-EXEC.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the keyword WORK.
313,3,  "TO SAVEPOINT clause is an Oracle extension"
/        ************              ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the TO SAVEPOINT <save_id> clause was used in a
//         ROLLBACK statement.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the TO SAVEPOINT clause.
314,3,  "DECLARE DATABASE is an Oracle extension"
/        ****************       ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the DECLARE DATABASE statement was used.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          this statement.
315,3,  "DECLARE TABLE is an Oracle extension"
/        *************       ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the DECLARE TABLE statement was used.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          this statement.
316,3,  "SQL FORMS statements are Oracle extensions"
/        *********                ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the one of the following statements was used:
//           o EXEC IAF GET
//           o EXEC IAF PUT
//           o EXEC TOOLS GET
//           o EXEC TOOLS SET
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use any of these statements.
317,3,  "Group item host variables are Oracle extensions"
/        LLLLLLLLLL                    ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a group item variable was used as a host variable.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use group items as host variables.
318,3,  "ARRAYLEN is an Oracle extension"
/        ********       ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the ARRAYLEN statement was used.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use this statement.
319,3,  "EXEC ORACLE statements are an Oracle extension"
/        ***********                   ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, an EXEC ORACLE statement was used.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use this statement.
320,3,  "VARYING host variable \"%s\" is an Oracle extension"
/        *******                            ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a variable declared of VARYING type
//         was used in a SQL statement.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use this statement.
321,3,  "Implicit varchar host variables are an Oracle extension"
/                                               ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, an iimplicit varchar variable was used in a 
//         SQL statement.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use this statement.
322,3,  "EXEC SQL LOB statements  an Oracle extension"
/        ************                ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, an EXEC SQL LOB statement was used. 
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use this statement.
//
// "400 - 499, Tokenizer or parsing errors."
//
400, 9, "%s"
// *Cause: A syntax error was found.
// *Action: Do the appropriate action to fix the indicated error.
401, 9, "Character string not properly terminated"
// *Cause: The character string was not terminated with a quote or apostrophe
//         as appropriate or line continuation was not correct.
// *Action: Check that the character string is terminated properly and that
//         line continuation syntax is correct.
402, 9, "Pseudo-text not properly terminated"
/        LLLLLLLLLLL
// *Cause: A block of pseudo-text has not been properly terminated with
//         "==".
// *Action: Terminate the pseudo-text at the appropriate place with "==".
//
// "500 - 649, Other semantic errors grouped by these features: threads, result
//  set cursors, miscellaneous, pl/sql (includes arraylen), exec tools
//  and lobs."
//
403, 10, "EXEC statement cannot begin in Area A"
/         ****
// *Cause: An EXEC statement began in Area A (before column 12).
// *Action: Shift the EXEC statement to the right to start it in Area B
//          (in or after column 12).
404, 11, "%s"
// *Cause: A syntax error was found.
// *Action: Do the appropriate action to fix the indicated error.
//
// "500 - 524, Threads"
//
500,11,  "No EXEC SQL CONTEXT USE statement encountered"
/            ********************
// *Cause: No EXEC SQL CONTEXT USE statement was encountered and the
//         option threads=yes was requested.
// *Action: Ensure that the necessary context variable (of type sql-context)
//          has been declared, ALLOCATEd, and USEd prior to any executable
//          SQL statements.
501,11,  "Runtime context variable \"%s\" not of correct type"
// *Cause: The runtime context variable referenced in an EXEC SQL CONTEXT USE
//         statement is not of type sql_context.
// *Action: Declare your runtime context variable of type sql_context.
502,11,  "This statement can only be used with THREADS=YES"
/                                              ***********
// *Cause: EXEC SQL ENABLE THREADS has been used, even though option 
//         THREADS is set to NO.
// *Action: Specify option THREADS=YES or remove the EXEC ENABLE THREADS
//          statement from the source code.
//
//
// "525 - 549, Result Set Cursors"
//
525,11,  "Use of the AT clause is not permitted here"
/                    **
// *Cause:  An explicit AT clause was used with an ALLOCATE statement or a 
//          FETCH/CLOSE statement also using a sql-cursor declaration.
// *Action: Remove the AT clause.
//
// "550 - 574, Miscellaneous"
//
550,8, "Unable to log on to ORACLE with \"%s\".  ORACLE error number: %u"
/                           ******               ******
// *Cause: The precompiler was unable to log on to ORACLE with the specified
//         username and password.  An ORACLE error with given number occurred
//         when the logon was attempted.
// *Action: Lookup indicated ORACLE database error message and take appropriate
//          action.
551, 5, "The SQLCA has already been included"
/            *****
// *Cause: The precompiler has encountered an include SQLCA statement
//         after SQLCA has already been included.  The SQLCA can only
//         be included once.
// *Action: Remove the duplicate include SQLCA statement.
552,11,  "The SQLCA and a SQLCODE variable cannot both be used"
/             *****       *******
// *Cause: The SQLCA has been included and a SQLCODE variable has been
//         declared.  This is not allowed as references to the SQLCODE
//         variable are ambiguous and will result in COBOL compiler errors.
// *Action: Use either the SQLCA or the SQLCODE variable.  Remove either the
//          include of the SQLCA or the SQLCODE variable declaration.
553,11, "FOR clause not allowed on this statement"
/        ***
// *Cause: A FOR clause was used with a SELECT, LOB, or DEALLOCATE DESCRIPTOR
//         statement.  A FOR clause cannot be used with these statements.  In
//         the case of a SELECT statement, data returned from the last loop in
//         the execution of the SELECT would overwrite data returned in a
//         previous loop.
// *Action: Remove the FOR clause from the statement.  Use a host language
//          construct to iteratively execute the statement.
554,11, "Must include SQLCA when mode=ANSI and WHENEVER SQLWARNING used"
/                     *****      *********     *******************
// *Cause: When MODE={ANSI | ANSI14}, an attempt was made to use the WHENEVER
//         SQLWARNING statement without declaring the SQLCA.  When MODE={ANSI |
//         ANSI14}, declaring the SQLCA is optional, but to use the WHENEVER
//         SQLWARNING statement, the SQLCA must be declared.
// *Action: Remove all WHENEVER SQLWARNING statements from the program or
//          declare the SQLCA by hardcoding it or copying it into the program
//          with the INCLUDE statement.
555,7,  "Using WHERE CURRENT OF on cursor defined without FOR UPDATE clause"
/              ****************                           **********
// *Cause:  if mode=ORACLE, then a cursor defined with a WHERE CURRENT OF
//  clause must also have a FOR UPDATE clause.
// *Action: Rewrite the cursor definition.
556,0, "Unrecoverable error.  Fix previous errors and re-precompile"
// *Cause:  A fatal parsing error or token stack overflow error has been
//          encountered.
// *Action: Fix the syntax error that is causing the parsing error.
557,11,"USING clause can only be used on a PREPAREd dynamic statement"
// *Cause:  A severe semantics error occurred because the USING clause
//          was used with the OPEN cursor statement and the cursor
//          declaration is not for a PREPAREd statement.  The correct
//          sequence of statements should be like:
//            EXEC SQL prepare sv from :sel_stmt END-EXEC.
//            EXEC SQL declare csv cursor for sv END-EXEC.
//            EXEC SQL open csv USING :hv1, :hv2 END-EXEC.
// *Action: Use the prepare statement for the sql statement and 
//          use that in the declare cursor statement.
558,11, "Invalid external datatype specified in EXEC SQL VAR statement"
/                                               ************
// *Cause: An invalid external datatype was specified in the 
//         EXEC SQL VAR statement.
// *Action: Specify a valid external datatype.
//
// "575 - 599, PL/SQL (including ARRAYLEN)"
//
559,11, "Cursor was not declared in scrollable mode"
// *Cause: A cursor which was not DECLAREd in SCROLL mode was used in 
//         scrollable mode in the FETCH statement.
// *Action: Declare the cursor in scroll mode using the SCROLL keyword.
560,11, "Value of offset cannot be negative in ABSOLUTE orientation mode"
// *Cause: The offset for the FETCH ABSOLUTE statement is negative. 
// *Action: Value of offset should be positive.
575,1, "PLS-%u: %s"
/       ***
// *Cause: Refer to the indicated PL/SQL error message for the indicated
//         condition.
// *Action: Refer to the indicated PL/SQL error message to correct the SQL
//          statement or embedded PL/SQL block.
576,9, "PLS-%u: %s"
/       ***
// *Cause: The precompiler found an error in an embedded SQL statement or
//         PL/SQL block.
// *Action: Refer to the indicated PL/SQL error message to correct the SQL
//          statement or embedded PL/SQL block.
577,7,  "Use of ARRAYLEN with host tables in SQL statements is ignored"
/               ********           LLLLLL    ***
// *Cause:  ARRAYLEN is only valid with PL/SQL.
// *Action: Use an appropriate table type. 
578,11,  "Variable \"%s\" must be a table"
/                                   LLLLL
// *Cause: In an ARRAYLEN statement, the name of a previously declared host
//         table was not specified.  The first host variable in an ARRAYLEN
//         statement must be a table.  The second host variable, which
//         specifies an array dimension, must be a 4-byte integer.  The correct
//         syntax follows:
//           EXEC SQL ARRAYLEN HTABLE (DIM) END-EXEC.
//         The ARRAYLEN statement must appear along
//         with, but somewhere after, the declarations of host_table and
//         dimension.
// *Action: Check the spelling of both identifiers in the ARRAYLEN statement.
//          If necessary, supply the missing host table name.
579,11,  "Invalid ARRAYLEN length variable type for \"%s\""
/                 ********
// *Cause: A valid table dimension was not specified in an ARRAYLEN statement.
//         The table dimension must be specified using a previously declared
//         4-byte integer host variable, not a literal or expression.  For
//         example, the offending code might look like:
//           EXEC SQL ARRAYLEN ETABLE (25) END-EXEC.  -- illegal dimension
// *Action: Supply a valid table dimension.  If necessary, declare a 4-byte
//          integer host variable for use in the ARRAYLEN statement.
580,11, "Previous use of host variable \"%s\" uses different indicator"
// *Cause: Within a PL/SQL statement, a host variable was used with two
//         different indicator variables or was used with an indicator
//         variable in one instance and without an indicator in another
//         instance.
// *Action: Change all references to the host variable so that they all use
//          the same indicator variable or all use no indicator variable.
581,11, "\"%s\" used as both host variable and indicator"
// *Cause: Within a PL/SQL statement, the variable was used as both a host
//         variable and an indicator variable.
// *Action: Use different variables for host variables and indicator variables.
//
// "600 - 624, EXEC TOOLS"
//
600,7,  "indicators are not allowed in EXEC IAF statements"
/                                      **** ***
// *Cause: Indicator variables associated with host variables cannot be used 
//         in EXEC IAF statements such as GET and PUT in a user exit.
// *Action: Eliminate the indicator variables. If feasible (for example with 
//          Forms V4), use EXEC TOOLS statements, which do allow indicator
//          variables. See the Programmer's Guide to the Oracle Precompilers
//          for more information of EXEC IAF and EXEC TOOLS statements.
/601  Message 601 has been removed.  601 can be reused for a different error.
/602  Message 602 has been removed.  602 can be reused for a different error.
603,11,  "An EXEC TOOLS MESSAGE host variable is not a character type"
/            ******************
// *Cause: If a host variable is used to specify the message in an
//    EXEC TOOLS MESSAGE statement, that host variable must be of a 
//    character type.
// *Action: Declare the message to a host variable of a char type.
//
// "625 - 649, EXEC SQL LOB statements"
//
625,11, "An indicator variable is not required with this attribute"
// *Cause:  In a LOB DESCRIBE, an indicator variable was used with a host
//          variable when retrieving a LOB attribute that does not require one.
// *Action: Remove the indicator variable.
626,11, "Incompatible LOB types"
/                     ***
// *Cause: A LOB operation was attempted between LOBs whose types were not
//         compatible.  For example, When ASSIGNing one LOB to another, both
//         LOBs must be of the same type.  If they are not, this error results.
// *Action: Correct the LOB operation by having it function between LOBs of 
//          the same type.  This may require a redeclaration of one of the LOBs
//          used in the LOB statement performing the specified operation.
627,11, "Host variable is not of character type"
// *Cause: The given host variable was not declared to be of
//         the required character type.  In this case, one of several possible
//         character types would have been accepted.  However, the host 
//         variable type did not match any of them.
// *Action: Redeclare the problematic host variable, using one of the
//          permitted character types.
628,11, "Buffer type is incompatible with LOB type"
/                                         ***
// *Cause: This error can occur in either of the following situations
//         1. An attempt to READ from a LOB into a buffer whose type was not
//            compatible with the LOB type.
//         2. An attempt to WRITE a buffer into a LOB whose type was not
//            compatible with the buffer type.
// *Action: Either the LOB type or the buffer type needs to be changed so
//          that the LOB and buffer types become compatible for the specified
//          operation.
629,11, "Host variable is not of Internal LOB type"
/                                         ***
// *Cause: The given host variable was not declared to be an internal LOB.
//         BLOB, CLOB or NCLOB are internal lob types.
// *Action: Redeclare the host variable using one of the internal LOB types.
630,11, "Host variable is not of LOB type"
/                                ***
// *Cause: The given host variable was not declared to be any type of LOB,
//         Internal or External.  BLOB, CLOB or NCLOB are internal lob types.
//         BFILE is an external type.
// *Action: Redeclare the host variable using any of the LOB types, Internal
//    or External.
631,11, "Host variable is not an External LOB"
/                                         ***
// *Cause: The given host variable was not declared to be an External LOB.
//         BFILE is an external type.
// *Action: Redeclare the host variable using an External LOB type (BFILE).
632,11, "Cannot open an External LOB in READ WRITE mode"
/                                ***    **** *****
// *Cause: An attempt was made to OPEN a BFILE in READ WRITE mode.  Writable
//         BFILEs are currently not supported so this operation is considered
//         erroneous.
// *Action: Do not open BFILEs using READ WRITE mode.  BFILEs can only be
//          OPENed in READ ONLY mode.
633,11, "Invalid host variable and attribute pairing"
// *Cause: The host variable and attribute pairing in a LOB DESCRIBE was
//         invalid.  Most likely, this was due to some problem with the host
//         variable.  For example, this error could occur if the host variable
//         was not declared.
// *Action: Usually, other, more specific, errors will accompany this one.
//          Correcting some or all of those problems should resolve this error.
/634  Message 634 has been removed.  634 can be reused for a different error.
635,11, "This attribute is only valid for Internal LOB types"
/                                                  ***
// *Cause: A request for a LOB attribute was made in a LOB DESCRIBE
//         statement in which the given LOB was not of some Internal LOB
//         type.
// *Action: Replace the LOB host variable in the LOB DESCRIBE with one
//          that was declared to be an Internal LOB.
636,11, "This attribute is only valid for External LOB types"
/                                                  ***
// *Cause: A request for a LOB attribute was made in a LOB DESCRIBE
//         statement in which the given LOB was not an External LOB type
//         (BFILE).
// *Action: Use an External LOB (BFILE) host variable in the LOB 
//          DESCRIBE statement.
637,11, "Host variable is not an exact binary integer"
// *Cause: A host variable was given that was not declared to be of some
//         acceptable exact binary integer type.  Generally, when this error
//         occurs, a signed or unsigned integer type was expected.  Floating
//         point or otherwise imprecise numeric types are considered erroneous.
// *Action: Replace the problematic host variable with one that was 
//          declared using a proper binary integer type.
638,11, "This attribute is only valid for internal or external LOB types"
/                                                              ***
// *Cause: A request for a LOB attribute was made in a LOB DESCRIBE
//         statement in which the given source was not an internal
//         or external LOB type.
// *Action: Use a LOB host variable in the LOB DESCRIBE statement.
639,11, "Cannot specify destination offset in a LOB WRITE APPEND"
/                                               *** ***** ******
// *Cause: A destination offset was specified in a LOB WRITE APPEND
//         statement.  The destination offset is assumed to be the end of
//         the LOB so specifying an explicit destination offset is
//         erroneous.
// *Action: Remove the destination offset from the LOB WRITE APPEND
//          statement.
//
// "700 - 725, Dynamic SQL error conditions"
//
700,11,  "This statement can only be used with DYNAMIC=ANSI"
/                                              ************
// *Cause: One of the following statements was used without specifying 
//         DYNAMIC=ANSI:
//           o  EXEC SQL ALLOCATE/DEALLOCATE/GET/SET DESCRIPTOR
//           o  EXEC SQL DESCRIBE OUTPUT/INPUT ... USING ... <descriptor name>
//           o  EXEC SQL EXECUTE ... INTO ...
//           o  EXEC SQL EXECUTE ... USING... <descriptor name>
//           o  EXEC SQL OPEN ... INTO ...
//           o  EXEC SQL OPEN ... USING... <descriptor name>
//           o  SCROLL in DECLARE CURSOR 
//           o  EXEC SQL FETCH <orientation> ...
//              where <orientation> is NEXT, PRIOR, FIRST, LAST, ABSOLUTE,
//              or RELATIVE
// *Action: Specify DYNAMIC=ANSI or remove statement(s) like those above.
701,11,  "MAX OCCURRANCES must be between 1 and 65535"
/         ***************
// *Cause: The value specified in the WITH MAX clause of an EXEC SQL
//         ALLOCATE DESCRIPTOR statement was less than 1 or greater than 65535
// *Action: Specifiy a value between 1 and 65535 inclusive
702,11,  "Out-of-range item number"
// *Cause: The value specified in the VALUES clause of an EXEC SQL
//         GET/SET DESCRIPTOR statement was less than one or greater
//         than 65535.
// *Action: Specify a value between 1 and 65535.
/
// "725 - 749, Outline errors [OUTLINE]"
//
725, 8, "Outline name length exceeds the allowed limit of %d characters"
/        ******* 
// *Cause: Outline name <category_name>_<filename>_<filetype>_<seqno>
//         has exceeded the allowed limit.
// *Action: Use OUTLNPREFIX option to specify the outline name which will
//          be well in the permitted limit.
726, 8, "Number of outlines has exceeded the limit"
/                  ********
// *Cause: Number of outlines that can be created has exceeded the file limit.
//         Allowed outlines per file is 10000.
// *Action: Split the file so that each file can have not more than 10000
//          outlines.
727, 8, "Outline cannot be created on statement at line %d, column %d"
/        *******
// *Cause: Outline cannot be created as there is a syntax error
//         or outlines are not supported on that statement.
// *Action: Correct the syntax error in the actual SQL used in the file or
//          refer to "Performance Tuning Guide" for the list of supported
//          statements.
/
// "900 - 1000, Fatal error conditions"
//
901,12,  "Pro*COBOL internal error condition detected (Code = %5.1d)"
/         *********
// *Cause: Pro*COBOL had detected an abnormal condition in its internal
//         data structures.  This error message should not normally ever
//         be produced.  Customer service should be contacted to report
//         the error.
// *Action: Correct any other errors which have been reported.  If the internal
//          error still exist, examine the source code where the condition
//          was detected and try modifying in some way.  Possibly this will
//          alleviate the internal error condition.
902,12,  "Unable to read message file, facility PCB"
/                                               ***
// *Cause: Pro*COBOL was unable to access the message file containing message
//         text.  The file is possibly corrupt.
// *Action: Contact customer support for information on reinstalling the
//          Pro*COBOL message files.
903,12,  "Pro*COBOL is unable to initialize its parser function"
// *Cause: Pro*COBOL was unable to access the message file containing message
//         text.  The file is possibly corrupt.
// *Action: Contact customer support for information on reinstalling the
//          Pro*COBOL message files.
/
/ Command-Line HELP Strings
/  These must be kept in the same order as the enum type containing PCBCF*
/  in pcbc.h.
/
1201, 0, "If yes, use ASA carriage control"
/            ***      ***
1202, 0, "If yes, assume SQLCODE variable exists"
/            ***         *******
1203, 0, "If yes, allow automatic connect to ops$ accounts"
/            ***                             ****
1204, 0, "The character set form used by PIC N variables"
/                                        *****
1205, 0, "The character set form used by PIC X variables"
/                                        *****
1206, 0, "If yes, close all cursors on COMMIT"
/            ***                       ******
/  [PID 18317]
1207, 0, "If yes, Common Sql Frontend is used for SQL checking"
/            ***  LLLLLL LLL LLLLLLLL             ***         
1208, 0, "If INTEGER, COMP-1 and COMP-2 variables are treated as integers"
/            *******  ******     ******
1209, 0, "Generate COMP-5 rather than COMP variables"
/                  LLLLLL             LLLL
1210, 0, "Used to specify user defined configuration files"
1211, 0, "Held cursors follow ANSI semantics and are closed after a rollback"
/                             ****
1212, 0, "Date string format"
1213, 0, "Support DB2 array insert/select syntax"
/                 *** 
1214, 0, "V7/V8 Compatibility mode"
/         *****
1215, 0, "Reserved for internal use only"
1216, 0, "DECLARE SECTION is required"
/         ***************
1217, 0, "Define a symbol for use in IFDEF [*]"
/                                    ***** ***
1218, 0, "Specifies Oracle or ANSI dynamic SQL semantics"
/                   ******    ****         ***
1219, 0, "End-of-FETCH SQLCODE value"
/                ***** *******
1220, 0, "Pad to column 72 from end-of-line"
1221, 0, "If yes, display errors to terminal [*]"
/            ***                             ***
1222, 0, "Unique numeric identifier for the generated Cobol file"
/         ******         **********                    
1223, 0, "If yes, perform FIPS flagging"
/            ***          ****
1224, 0, "Format of input file lines <ansi/terminal/variable>"
/                                     *****LLLLLLLL*LLLLLLLL
1225, 0, "If yes, hold OraCursor (do not reassign) [*]"
/            ***       *********                   ***
1226, 0, "Host language"
1227, 0, "Implicit savepoint prior to buffered insert"
1228, 0, "Input filename"
1229, 0, "Pathname for EXEC SQL INCLUDE files [*]"
/                      ****************       ***
1230, 0, "*irecfm*"
/         ********
1231, 0, "Input file record length"
1232, 0, "Delimiter for COBOL string literals <quote/apost>"
/                       LLLLL
1233, 0, "List filename"
1234, 0, "*lrecfm*"
/         ********
1235, 0, "List file record length"
1236, 0, "List type <long/short/none> [*]"
/                                     ***
1237, 0, "Maximum length of literal string [*]"
/                                          ***
1238, 0, "Max number of OraCursors in Cursor Cache [*]"
/                       **********                 ***
1239, 0, "Maximum number of rows to buffer for INSERT statements"
/                                              ******
1240, 0, "If ansi, follow ANSI standards <oracle/ansi or iso/ansi14 or iso14>"
/            ****         ****            ***********    **********    *****
1241, 0, "If yes, nested programming is supported (GLOBAL will be generated)"
/                                                  ******
1242, 0, "If yes, use NCHAR semantics of previous Pro*COBOL releases"
/            ***      *****
1243, 0, "Option specific to Stratus"
/                            LLLLLLL
1244, 0, "Output (generated code) filename"
1245, 0, "Use ORACA communications area [*]" 
/             *****                     ***
1246, 0, "*orecfm*"
/         ********
1247, 0, "Output file record length"
1248, 0, "Category in which Outlines are created [yes/no/<category name>]"
/         ********          ********              **********************
1249, 0, "Outline name prefix"
/         *******
1250, 0, "List file page length"
/ [20930 Endianness]
1251, 0, "Endianness in PIC N host variables"
/
1252, 0, "Datatype of PIC X host variables"
/                     *****
1253, 0, "Number rows pre-fetched at cursor OPEN time [*]"
/                                              ****
1254, 0, "If yes, release OraCursor after execute [*]"
/            ***          *********               ***
1255, 0, "If yes, create Outlines in the Database"
/            ***         ********        ********
1256, 0, "If yes, generate FOUND error on SELECT [*]"
/            ***           *****          ****** ***
1257, 0, "SQL checking level <syntax or limited/semantics or full/none> [*]"
/         ***                 ******    *****************    *********  ***
1258, 0, "Size of statement cache"
/         ****    ********* *****
1259, 0, "If yes, multi-threaded support is provided"
/            ***  LLLLLLLLLLLLLL
1260, 0, "Use Oracle or ANSI type codes for dynamic SQL"
/             ******    ****                        ***
1261, 0, "If yes, unsafe null fetches are allowed"
/            ***
1262, 0, "Oracle logon user id and password"
/         ******
1263, 0, "If yes, accept user defined VARCHAR group items"
/            ***                      ******* LLLLLLLLLLL
1264, 0, "If yes, generate symbol cross references [*]"
/            ***                                   ***
/
/Fixed strings
/  These are miscellaneous messages put out by the precompiler
/
1301, 0, "\n\"[*]\" indicates this option legal via EXEC ORACLE OPTION\n"
/             ***                                   ******************
1302, 0, "Not a valid host variable"
/  A comment put into the XREF.
1303, 0, "Host Variables"
/  A title put into the XREF at the beginning of the list of host variables.
1304, 0, "--------------"
/  A line of hyphens matching string 1303 in length.
1305, 0, "SQL Identifiers"
/         ***
/  A title put into the XREF at the beginning of the list of SQL identifiers.
1306, 0, "---------------"
/  A line of hyphens matching string 1306 in length.
1307, 0, "Unknown SQL identifier type"
/                 ***
/  A comment put into the XREF.
1308, 0, "Not Defined"
/  A comment put into the XREF.  A DEFINE identifier used in an EXEC ORACLE
/    IFDEF has not been defined anywhere
1309, 0, "Pre-defined"
/  A comment put into the XREF.  A DEFINE identifier which is one of those
/    pre-defined by the precompiler without the user doing anything.
1310, 0, "Configuration File"
/  A comment put into the XREF.  A DEFINE identifier which has been defined
/    within a configuration file.
1311, 0, "Command Line"
/  A comment put into the XREF.  A DEFINE identifier which has been defined
/    on the command line.
1312, 0, "Inline"
/  A comment put into the XREF.  A DEFINE identifier which has been defined
/    within the program with an EXEC ORACLE OPTIONS statement.
1313, 0, "Group Item"
/         LLLLLLLLLL
/  A comment put into the XREF.
1314, 0, "Statistics"
/  A title put into the XREF at the beginning of the statistics
1315, 0, "----------"
/  A line of hyphens matching string 1314 in length.
1316, 0, "Return code: %d"
1317, 0, "Number of messages at severity %c: %d"
1318, 0, "Number of input lines: %d"
1319, 0, "Number of host variables declared: %d"
1320, 0, "Number of cursor names: %d"
1321, 0, "Number of statement names: %d"
1322, 0, "Maximum memory (bytes) used: %d"
1323, 0, "Password: "
