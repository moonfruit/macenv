/ 
/ $Header: prous.msg 16-jul-99.15:38:20 gstevens Exp $ 
/ 
/ Copyright (c) 1991, 1996, 1997, 1999 by Oracle Corporation 
/   NAME
/     prous.msg
/   DESCRIPTION
/     Contains error msgs generated by PRO*
/   NOTES
/   MODIFIED   (MM/DD/YY)
/    gstevens   07/16/99 -  added nls_do_not_translate for ones asked about
/    mchiocca   11/19/97 -  [Optima] Move Command Line Names and Values
/    apopat     08/08/97 -  [475842] Implement COMP1 command line option
/    losborne   07/31/97 -  Remove V6 compatibility
/    losborne   12/17/96 -  Add CONVBUFSZ clause to E.S. VAR
/    jnewman    11/25/96 -  edit Cause and Action statements
/    jnewman    11/24/96 -  editing Cause and Error statements
/    apopat     07/25/96 -  [369874] Adding <Literal> as Fixed String
/    mjogleka   08/16/95 -  make translation adjustments (as done in 7.2.3)
/    gturk      08/02/95 -  Added translation guide for genric help strings
/    gturk      07/11/95 -  #(272453) - generic help scrn
/    mjogleka   06/23/95 -  Renamed from pccerr.msg to prous.msg
/    mjogleka   05/05/95 -  #(277265) change wording for error 146
/    mjogleka   05/01/95 -  #(277265) Add message and strings for host option
/    losborne   03/23/95 -  THREADS statements cannot be used when THREADS=NO
/    losborne   03/13/95 -  UNSAFE_NULL_FETCH is now UNSAFE_NULL
/    losborne   02/22/95 -  Invalid option combinations with UNSAFE_NULL_FETCH
/    losborne   02/21/95 -  Implement UNSAFE_NULL_FETCH option
/    losborne   02/08/95 -  153234 Pro*COB apps cannot use both SQLCA and SQLCO
/    losborne   01/26/95 -  Misc Cause/Action changes from Jack Godwin
/    losborne   02/07/95 -  Modifying message 139
/    mjogleka   02/03/95 -  New command line option THREADS
/    mjogleka   01/12/95 -  #(221011)(261282) remove error 134, modify #72
/    losborne   01/19/95 -  Update Cause/Action for a couple more messages
/    losborne   01/03/95 -  Add Cause/Action
/    losborne   12/29/94 -  Remove C from host list
/    losborne   12/12/94 -  FIPS flag CREATE PACKAGE, etc.
/    mjogleka   12/06/94 - #(160310) modify message 94 for simple char variable
/    losborne   11/07/94 -  [248616] Cannot set MAXLITERAL after OPEN <cursor>
/    losborne   10/04/94 -  Modify msg 132
/    losborne   09/09/94 -  Move NTT MIA err msg to COBOL specific section
/    losborne   09/02/94 -  N-strings not allowed in PL/SQL
/    losborne   09/02/94 -  Err msg for using PIC N var in EXEC SQL VAR
/    losborne   07/27/94 -  Cursor vars not implemented for C, Pascal, or PL/I
/    mlozoya    06/17/94 -  #(221011) add message 134
/    losborne   06/17/94 -  Result Set enhancement
/    losborne   05/19/94 -  host_varchar option will now just be varchar
/    losborne   05/13/94 -  Error when nls_local=yes and mode!=ansi
/    losborne   05/11/94 -  Add NLS_LOCAL and HOST_VARCHAR options to help scrn
/    losborne   05/10/94 -  Cannot use arrays with NLS N variable
/    mlozoya    04/15/94 -  change message 131 to 132
/    mlozoya    04/13/94 -  fix bug 209717, add message 132
/    losborne   02/24/94 -  Add err msg for invalid Pro*COB BINARY dt use
/    rhari      02/15/94 -  add COMP5 string
/    rhari      02/04/94 -  delete errors 129
/    rhari      02/02/94 -  add some more messages
/    losborne   01/05/94 -  Add documentation for translators
/    rhari      12/08/93 -  merge changes from branch 1.32.710.2
/    rhari      12/08/93 -  add tasking for ada
/    losborne   11/11/93 -  backport unix procobol comp5 option
/    losborne   08/11/93 -  Modify message 26 
/    losborne   08/04/93 -  Add auto_connect to help screen 
/    rhari      08/04/93 -  auto_logon to auto_connect 
/    rhari      05/19/93 -  config to configuration 
/    rhari      05/10/93 -  include new error messages for command line process
/    rhari      03/22/93 -  adding command line options for pcc 1.6 
/    losborne   01/25/93 - #(126796) Option ctling PRO*FOR 1.3 compatibility 
/    losborne   12/08/92 -  COMMON_NAME option can be used inline 
/    losborne   11/25/92 -  COMMON_NAME opt must be at prog beginning 
/    cracicot   11/18/92 -  add 'native' fst 
/    jweisz     11/17/92 -  [92941] Message for multi-line varchar decl 
/    jweisz     11/11/92 -  [41152] Error msg: INAME = ONAME 
/    jweisz     11/09/92 -  [131113] Shorten ALL precomp names in banner msg
/    jweisz     11/06/92 -  Add array of varchar ptrs error 
/    jweisz     11/05/92 -  Codegen file IO error 
/    losborne   10/30/92 -  C id's truncated to 31 chars 
/    losborne   07/24/92 -  Adding explanation for msg 61 
/    losborne   06/09/92 -  Warning on using CONST vars in INTO clause 
/    losborne   06/09/92 -  FIPS warning for hostvar initialization 
/    losborne   03/18/92 -  Modify msg 99 
/    losborne   02/10/92 -  Array req'd in ARRAYLEN stmt 
/    losborne   02/05/92 -  Update some of the error msgs 
/    losborne   01/10/92 -  Change pcc to pro* in internal error msg 
/    losborne   12/17/91 -  Len spec req'd in EXEC SQL VAR stmt for VAR types 
/    losborne   11/15/91 -  Detect improper use of MODE option with DBMS option
/    losborne   11/12/91 -  New DBMS option 
/    losborne   07/19/91 - Reinstall missing stuff
/    losborne   03/26/91 - Add more specific FIPS error msgs 
/    losborne   03/25/91 - New ANSI mode (no digits attached) 
/    losborne   07/10/91 - SQLCHECK value exceeds command line value 
/    losborne   06/26/91 - Add missing 2075 ansi/iso back in 
/    losborne   05/03/91 - New option values KR_C and ANSI_C 
/    losborne   04/24/91 - NULL char invalid in COBOL character literal
/    losborne   04/18/91 - Warning if mode=ANSI and SQLWARN used, but there
/                             is no SQLCA
/    losborne   04/18/91 - Renamed from error.msg to pccerr.msg
/  Osborne    03/11/91 - Add additional comments on some errors
/  Osborne    03/04/91 - Add comments about each err msg
/  Osborne    01/28/91 - Correct msgs 77 and 78
/  Osborne    01/22/91 - New error msgs
/  Osborne    01/21/91 - Array FETCH not allowed when mode=ANSI14
/  Osborne    12/03/90 - ANSI + ISO option names changed to ANSI14 + ISO14
/  Osborne    10/09/90 - Fix PL/SQL not allowed msg
/  Osborne    10/01/90 - Synonyms SYNTAX and SEMANTICS for LIMITED and FULL
/  Osborne    09/25/90 - New COMMON_NAME option for FORTRAN
/  Osborne    09/17/90 - Found END but not in PROG, SUB, etc.
/  Osborne    09/06/90 - New lines option for Pro*C to produce #line nos
/ 
/
/       TRANSLATION DOCUMENTATION:
/
/  The following messages are broken down into the following categories:
/
/      1 - 1999: PRO* Error messages.  These should be translated with some
/        exceptions where a keyword, command line option name or value, or
/        something similar is mentioned.
/
/   2000 - 2099: "Fixed" strings.  DO NOT TRANSLATE.  These are command line
/        line option names and values, keywords, etc.  There are a few things
/        here which *can* be translated.  These are marked with "T...T".
/
/   2100 - 2299: Other "fixed" strings.  Most of these are explanatory text
/        for the old PRO* "help" screen.  These can in general be translated 
/        except where command line option names or values, etc. are mentioned.
/
/   4200 - 4299: Explanatory text for the PRO* help screen for the current
/        release of PRO*. These should be translated except where option names,
/        values, etc. are mentioned. Words which should not be translated are
/        marked with "*....*".
/
/  Restrictions on translations:
/
/   1)  Format strings such as "%s", "%u", etc. are *not* translated.
/
/   2)  Most of the error messages (1-1999) are used as C language format
/       strings and use C formatting (%s, %u, %d, etc.).  The relative
/       order of the formats (%s, etc.) within a particular error message
/       and the phrases that contain them CANNOT be changed without
/       possibly causing a precompiler abort or incorrect information in
/       the error message.  For instance, consider error message #1 --
/       the translation for "at column %u" must be before the translation
/       for "in line %u" which must be before the translation for
/       "of file %s".  The same situation applies to messages 2100 to 2299.
/
/   3)  Many of the individual words in the messages 1-1999, 2100-2299, 4200+
/       are host language keywords, SQL keywords, PRO* command line option names
/       and values and should *not* be translated.  These individual words
/       have "*"s underneath them.
/
/   4)  Some terminology is computer language terminology, such as "Area A"
/       for COBOL, that I am not sure whether or not it is translated.  The
/       best thing to do here is to get an American version of a compiler
/       manual for the particular computer language to find out what the
/       term refers to and then to look in a foreign language version of a
/       manual for the computer language to see how it is translated.  These
/       are marked with "L...L".
/
/   5)  Some terms, such as "bind" and "define", are Oracle terms that I do
/       not know if they are translated.  These terms are not marked in
/       any way.  The translator should be generally familiar with the
/       Oracle terminology for the language being translated to.
/
/   You will see these marks BELOW the word to be marked.
/   ***** - Do not translate this part of otherwise translated text.
/   TTTTT - Translate this part of otherwise untranslated text.
/   LLLLL - Computer language terminology, look in appropriate computer
/             language manuals for translations.
/
/
/	PRO* Error Messages.
/
// NLS Translate except %s,%u, %d, etc or marked with  "***" [0000,1999]
1,0,	"Unable to open file %s"
// *Cause: The precompiler was unable to open a temporary file for internal
//         use.  There might be insufficient disk space, too many open files,
//         or read-only protection on the output directory.
// *Action: Check that there is enough disk space, that the limit for open
//          files is set high enough (check with the system manager) and that
//          protection on the directory allows opening a file for writing.
2,0,	"Invalid syntax at column %u in line %u of file %s"
// *Cause: There is a syntax error in an EXEC statement or the statement is
//         not properly terminated.
// *Action: Correct the syntax of the EXEC statement.  If the error occurred
//          at the end of the input file, check that the last EXEC statement
//          is properly terminated.
3,0,	"Invalid SQL Identifier at column %u in line %u of file %s"
/                ***
// *Cause: The symbol in a conditional precompilation statement (such as EXEC
//         ORACLE IFDEF) is invalid, or the name of a SQL descriptor,
//         statement, or cursor is invalid or was not properly declared.
// *Action: Check the statement syntax and spelling of the identifier and
//          check that a reserved word was not accidentally used.  If
//          necessary, define the identifier in a variable declaration or
//          DECLARE statement ahead of the line in error.
4,0,	"Mismatched IF/ELSE/ENDIF block at line %u in file %s"
/                   *************
// *Cause: There is an EXEC ORACLE ELSE or EXEC ORACLE ENDIF statement
//         without a matching EXEC ORACLE IFDEF statement.
// *Action: Add the missing EXEC ORACLE IFDEF statement or deletee or move
//          the EXEC ORACLE ELSE or EXEC ORACLE ENDIF statement.
5,0,	"Unsupported datatype in line %u of file %s"
// *Cause: A host variable defined in the Declare Section has an unsupported
//         datatype or has a scale or precision outside the supported range.
// *Action: Redefine the host variable using a supported datatype.  Check that
//          the scale and precision of a numeric variable are in the accepted
//          range.
7,0,	"Invalid WHENEVER condition at column %u in line %u of file %s"
/                ********
// *Cause: A condition other than SQLERROR, SQLWARNING, or NOT FOUND was
//         specified in an EXEC SQL WHENEVER statement, or one of these was
//         used, but spelled incorrectly.
// *Action: Correct the spelling of the WHENEVER condition or use a host-
//          language IF statement to test the special condition.
8,0,	"Invalid WHENEVER action at column %u in line %u of file %s"
/                ********
// *Cause: At lease one of the following:
//           o An action other than CONTINUE, DO, GOTO, or STOP was specified
//             in an EXEC SQL WHENEVER statement.
//           o One of the specified actions was spelled incorrectly.
//           o The host language does not allow the action (STOP is illegal
//             in Pro*Pascal programs).
//           o A GOTO label is invalid.
// *Action: Check that the host language allows the specified WHENEVER action.
//          If necessary, correct the spelling of the WHENEVER action or
//          correct the GOTO label.
9,0,	"Invalid host variable at column %u in line %u of file %s"
// *Cause: A host variable used in an EXEC SQL statement was not declared in
//         the Declare Section or has an unsupported datatype.
// *Action: Declare the host variable in the Declare Section, making sure it
//          has one of the supported datatypes.
10,0,	"Statement out of place at line %u in file %s"
// *Cause: An EXEC statement was not placed properly in the host program.  For
//         example, there might be a data manipulation statement in the
//         Declare Section.  In a Pro*COBOL program, the Declare Section might
//         be outside the WORKING-STORAGE or LINKAGE SECTION.
// *Action: Remove or relocate the statement.
11,0,	"Already in a declare section at line %u in file %s"
/                     ***************
// *Cause: A BEGIN DECLARE SECTION statement was found inside a Declare
//         Section.
// *Action: Remove the extra BEGIN DECLARE SECTION statement.
12,0,	"Not in a declare section at line %u in file %s"
/                 ***************
// *Cause: An END DECLARE SECTION statement without a matching BEGIN DECLARE
//         SECTION statement was found.  Either the BEGIN DECLARE SECTION
//         statement is missing or misspelled or the END DECLARE SECTION
//         statement is an extra.
// *Action: Add or correct the BEGIN DECLARE SECTION statement or remove the
//          extra END DECLARE SECTION statement.
13,0,	"Unable to open include file \"%s\" at line %u in file %s"
/                       *******
// *Cause: The precompiler was unable to open the input file specified in the
//         INCLUDE statement.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File access privileges are insufficient.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges to access the file have been
//          granted, and that it is not locked by another user.  Also, check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).
14,0,	"Undeclared SQL Identifier \"%s\" at line %u in file %s"
/                   ***
// *Cause: The name of a descriptor, statement, or cursor was not declared or
//         is misspelled.
// *Action: Add or correct the descriptor, statement, or cursor declaration.
15,0,	"Unrecognized Host Language syntax ignored at line %u in file %s"
// *Cause: The host language syntax used to define a host variable in the
//         Declare Section is incorrect.
// *Action: Check the syntax and the spelling, then correct the declaration.
16,0,	"Unable to open a cursor at line %u in file %s"
// *Cause: The syntax in a SQL statement is faulty.  The precompiler was
//         expecting a host variable, but found something else.
// *Action: Check the syntax and the spelling, then correct the SQL statement.
17,0,	"Unable to parse statement at line %u in file %s"
// *Cause: There is a syntax error in an array declaration.  The precompiler
//         was expecting a right bracket (]) but found something else.
// *Action: Check the syntax, then correct the array declaration.
18,0,	"Expected \"%s\", but found \"%.15s\" at line %u in file %s"
// *Cause: The syntax in a SQL statement is faulty.  The precompiler found an
//         unexpected or illegal token.
// *Action: Check the syntax and the spelling, then correct the SQL statement.
19,0,	"Unable to obtain bind variables at line %u in file %s"
// *Cause: The precompiler was unable to find information about an input host
//         variable (bind variable) used in a SQL statement.
// *Action: Check that the input host variable is declared in the Declare
//          Section and used properly in the SQL statement.
20,0,	"Unable to obtain define variables at line %u in file %s"
// *Cause: The precompiler was unable to find information about an output host
//         variable (define variable) used in a SQL statement.
// *Action: Check that the output host variable is declared in the Declare
//          Section and used properly in the SQL statement.
21,0,	"Oracle Error: %s"
// *Cause: An Oracle error occurred.
// *Action: Refer to the indicated message in the ORA message chapters of 
//        this manual.
22,0,	"Out of space - unable to allocate %u bytes"
// *Cause: The precompiler process ran out of memory.
// *Action: Allocate more memory to the process, then retry.
23,0,	"Unable to log off from ORACLE"
/                               ******
// *Cause: An Oracle connection error occurred while the precompiler was
//         trying to log off, probably because ORACLE has been shut down.
// *Action: Check that ORACLE is available, then retry.
24,0,	"Indicator variable \"%s\" has wrong type or length at line %u in file %s"
// *Cause: An indicator variable was not declared in the Declare Section as a
//         2-byte integer.  Indicator variables must be defined as 2-byte
//         integers.
// *Action: Redefine the indicator variable as a 2-byte integer.
25,0,	"Undeclared indicator variable \"%s\" at line %u in file %s"
// *Cause: An indicator variable used in a SQL statement was not declared in
//         the Declare Section or its name is misspelled.
// *Action: Add or correct the indicator variable declaration.
26,0,	"Invalid host variable \"%s\" at line %u in file %s"
// *Cause: A host variable used in a SQL statement was not declared properly.
//         Some possible causes follow:
//           o It was not declared in the Declare Section.
//           o Its datatype is not supported.
//           o Its name is misspelled.
//           o It is a COBOL group item; in Pro*COBOL, only elementary items
//             are allowed in a SQL statement.
// *Action: Add or correct the host variable declaration.
27,0,	"Redeclared SQL Identifier \"%s\" at line %u in file %s"
/                   ***
// *Cause: The name of a SQL descriptor, statement, or cursor was re-declared
//         (that is, declared twice)
// *Action: Check the spelling of the identifier, then, if necessary, remove
//          the extra declaration.
28,0,	"Option \"%s\" not legal as EXEC ORACLE OPTION"
/                                   ******************
// *Cause: A precompiler option was specified inline in an EXEC ORACLE
//         statement.  Some options can be specified only on the command line.
//         For example, INAME cannot be specified inline.
// *Action: Respecify the precompiler option on the command line, instead of
//          in an EXEC ORACLE statement.  To see an online display of the
//          precompiler options, enter the precompiler command (with no
//          options) at the operating-system prompt.
29,0,	"Ambiguous option \"%s\""
// *Cause: The name of a precompiler option was abbreviated ambiguously.  For
//         example, MAX= might refer to MAXLITERAL or MAXOPENCURSORS.
// *Action: Respecify the full option name or an unambiguous abbreviation.  To
//          see an online display of the precompiler options, enter the
//          precompiler command (with no options) at the operating-system
//          prompt.
31,0,	"Invalid value given for option \"%s\""
// *Cause: The value specified for a precompiler option is invalid, probably
//         because the value is misspelled (as in LTYPE=HORT) or out of range
//         (as in PAGELEN=-55).
// *Action: Check the value, making sure it is spelled correctly and within
//          the legal range.
32,0,	"Invalid option \"%s\""
// *Cause: The precompiler found an invalid precompiler option name.  Some
//         possible causes follow:
//           o The option name is misspelled.
//           o The specified option does not exist.
//           o The equal sign (=) between the option name and value is missing
//             or has space around it.
// *Action: Check that the option exists and that its name is spelled
//          correctly.  To see an online display of the precompiler options,
//          enter the precompiler command (with no options) at the operating-
//          system prompt.  Also check that there is an equal sign between the
//          option name and value.
33,0,	"Missing operand for option \"%s\""
// *Cause: No value was specified for a precompiler option.  Either the value
//         is missing or there is space around the equal sign (as in
//         LTYPE =SHORT).
// *Action: Check that a value for each option has been specified and there is
//          no space around the equal sign.
36,0,	"No input file name specified"
// *Cause: The input file was not specified on the command line.
// *Action: Use the INAME command-line option to specify the input file.
37,0,	"Unable to log on to ORACLE with \"%s\".  ORACLE error number: %u"
/                            ******               ******
// *Cause: The precompiler was unable to log on to ORACLE with the specified
//         username and password.  An ORACLE error with given number occurred
//         when the logon was attempted.
// *Action: Refer to the indicated message in the ORA message chapters of 
//         this manual.
38,0,	"Unable to open a cursor"
// *Cause: This is an internal error message not usually issued.
// *Action: Call customer support for assistance.  If the application does not
//          require syntactic or semantic checking of SQL statements and does
//          not use PL/SQL, specify SQLCHECK=NONE on the command line.
39,0,	"Unable to open input file \"%s\""
// *Cause: The precompiler was unable to open the input file specified by the
//         INAME precompiler option.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File access privileges are insufficient.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges have been granted to access the
//          file, and that it is not locked by another user.  Also check that
//          there is enough disk space and that the limit for open files is
//          set high enough (check with the system manager).
40,0,	"Unable to open listing file \"%s\""
// *Cause: The precompiler was unable to open the listing file specified by the
//         LNAME precompiler option.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File acces privileges are insufficient.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges have been granted to access
//          the file, and that it is not locked by another user.  Also check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).  If a listing
//          file is not needed, specify LTYPE=NONE on the command line.
41,0,	"Unable to open output file \"%s\""
// *Cause: The precompiler was unable to open the listing file specified by the
//         ONAME precompiler option.  Some possible causes follow:
//           o The filename is misspelled.
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File acces privileges are insufficient.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that the file exists, that the search path to the file is
//          correct, that sufficient privileges have been granted to access
//          the file, and that it is not locked by another user.  Also check
//          that there is enough disk space and that the limit for open files
//          is set high enough (check with the system manager).
42,0,   "Must EXEC SQL INCLUDE SQLCA when mode=ANSI and WHENEVER SQLWARNING used"
/             **********************      *********     *******************
// *Cause: When MODE={ANSI | ANSI14}, an attempt was made to use the WHENEVER
//         SQLWARNING statement without declaring the SQLCA.  When MODE={ANSI |
//         ANSI14}, declaring the SQLCA is optional, but to use the WHENEVER
//         SQLWARNING statement, the SQLCA must be declared.
// *Action: Remove all WHENEVER SQLWARNING statements from the program or
//          declare the SQLCA by hardcoding it or copying it into the program
//          with the INCLUDE statement.
44,0,	"Array size mismatch in INTO/USING. Minimum is: %s(%u:%u)"
/                               **********
// *Cause: The size of an array variable in an INTO/USING clause is too small
//         for the number of rows processed.
// *Action: Declare all array variables in the INTO/USING clause to have at
//          least the minimum dimension given.
45,0,	"%s clause inappropriate at line %u in file %s. Ignored."
// *Cause: There is a misplaced clause at the end of an EXEC SQL statement (an
//         AT clause at the end of a SELECT statement, for example), or the
//         action specified in a FOR clause is invalid (for example, FOR :loop
//         INTO...).
// *Action: Check the statement syntax, then relocate or correct the misplaced
//          or invalid clause.
47,0,	"Unterminated comment/string constant beginning near line %u in file %s"
// *Cause: A string constant is missing an ending quotation mark, or a comment
//         is missing an ending delimiter.
// *Action: Check that all comments are delimited and all string constants are
//          enclosed by quotation marks.
50,0,	"Unable to generate descriptor in program unit ending line %u in file %s"
/ A "descriptor" is a data structure internel to the precompilers that
/ contains information on a particular object in the user's program.
// *Cause: The precompiler was unable to generate a descriptor for the
//         compilation unit.  This can occur from either of the following:
//           o A non-existent or improperly implemented Declare Section
//           o Undetected syntax errors near the beginning of the source file
//             or just before the END DECLARE SECTION statement
// *Action: Verify that the Declare Section is properly implemented.  Then
//          check for syntax errors at the beginning of the compilation unit
//          and before any END DECLARE SECTION statement, and correct as
//          appropriate.
51,0,	"Size of VARCHAR %s is larger than 65533 in line %u in file %s"
/                *******
// *Cause: The declared size of a VARCHAR host variable exceeds the precompiler
//         limit of 65533 bytes.
// *Action: Check the Declare Section, making sure the size of each VARCHAR
//          variable does not exceed the limit of 65533 bytes.
53,0,	"FOR variable %s is invalid type at line %u in file %s"
/        ***
// *Cause: The count variable in a FOR clause has the wrong datatype.  The
//         datatype must be NUMBER or LONG (or be compatible with NUMBER or
//         LONG).
// *Action: Check the declaration and check that the count variable has a
//          datatype of NUMBER or LONG (or a compatible Oracle or host-language
//          datatype).
54,0,	"Expected End-of-Statement at column %u in line %u of file %s"
// *Cause: The precompiler expected to find a statement terminator at the end
//         of an EXEC statement but found something else.  This can happen if
//         tabs were embedded in the source code (because the precompiler has
//         no way of knowing how many spaces a tab represents).
// *Action: If tabs are embedded in the source ocde, replace them with spaces.
//          Check the statement syntax and check that each EXEC statement has
//          a terminator.  For embedded CREATE {FUNCTION | PROCEDURE |
//          PACKAGE} statements and for embedded PL/SQL blocks, check that the
//          statement terminator is END-EXEC.
55,0,      "Array \"%s\" not allowed as bind variable at line %u in file %s"
// *Cause: A host array was used as a bind (input) variable in the WHERE clause
//         of a SELECT statement.  This is not allowed.
// *Action: Remove the host array or replace it with a simple host variable.
56,0,   "FOR clause not allowed on SELECT statement at line %u in file %s."
// *Cause: A FOR clause was used with a SELECT statement.  This is not allowed
//         as data returned from the last loop in the execution of the SELECT
//         overwrites data returned in a previous loop.
// *Action: Remove the FOR clause from the SELECT statement and use a host-
//          language construct to iteratively execute the SELECT statement.
60,0,	"Both CURSOR and STATEMENT have AT clauses at line %u of file %s."
/             ******     *********      **
// *Cause: Two AT clauses, one in a DECLARE STATEMENT statement, the other in a
//         DECLARE CURSOR statement, pertain to the same SQL statement.  The AT
//         clause may be specified with either DECLARE STATEMENT or DECLARE
//         CURSOR, but not with both.
// *Action: Remove the AT clause from one of the statements.
61,0,   "Error at line %u, column %u. PLS-%u: %s"
/                                     ****
// *Cause: The precompiler found an error in an embedded SQL statement or
//         PL/SQL block.
// *Action: Refer to the indicated PL/SQL error message to correct the SQL
//          statement or embedded PL/SQL block.
62,0,  "Must use option SQLCHECK=SEMANTICS(FULL) when there is embedded PL/SQL"
/                       ************************                        ******
// *Cause: The precompiler tried to parse an embedded PL/SQL block when
//         SQLCHECK={SYNTAX | NONE}.  PL/SQL blocks can be parsed only when
//         SQLCHECK=SEMANTICS is specified.
// *Action: Remove the PL/SQL block or specify SQLCHECK=SEMANTICS.
63,0,      "Reached end of file %s before End-of-Statement at line %u!"
// *Cause: The precompiler encountered an end-of-file while parsing a
//         PL/SQL block.
// *Action: Add the appropriate statement terminator (;) or end-of-block
//          statement (END;) to the PL/SQL block.
64,0,      "All uses of a given host variable must use identical indicator variables."
// *Cause: Two or more occurrences of a host variable in an EXEC SQL statement
//         were associated with different indicator variables.  This is not
//         allowed.
// *Action: Rename the indicator variables so that each occurrence of the host
//          variable is associated with the same indicator variable.
65,0,      "Userid required, but not specified."
/           ******
// *Cause: The SQLCHECK=SEMANTICS option was specified, but the USERID option
//         on the command line was not specified.
// *Action: Specify USERID=username/password or enter a username and password
//          when prompted or specify SQLCHECK={SYNTAX | NONE}.
66,0,      "Userid only used when SQLCHECK = FULL, userid ignored."
/           ******                ***************  ******
// *Cause: The USERID option was specified when SQLCHECK={SYNTAX | NONE}.  This
//         is unnecessary.
// *Action: Specify the USERID option only when SQLCHECK=SEMANTICS.
67,0,      "Ireclen exceeded.  Line %u in file %s truncated."
/           *******
// *Cause: While reading the input file, the precompiler found a line longer
//         than IRECLEN.
// *Action: Either shorten the input line or specify a larger IRECLEN value on
//          the command line.
68,0,      "Host and indicator variables may not have the same name."
/                    *********
// *Cause: In an EXEC SQL statement, an indicator variable had the same name
//         as a host variable.  The names of a host variable and its
//         associated indicator variable must be different.  Also, an
//         indicator variable cannot be used as a host variable.
// *Action: Rename the host or indicator variable.
69,0,	"Host variable \"%s\" has unsupported datatype at line %u in file %s"
// *Cause: A host variable had an unsupported datatype.  For a list of
//         supported datatypes, see the language-specific supplement to the
//         Programmer's Guide to the Oracle Precompilers.
// *Action: Redefine the host variable in the Declare Section, giving it a
//          supported datatype.
70,0,      "Illegal syntax, Exponential value in SQL statement: %s"
/                                                ***
// *Cause: The precompiler found a syntax error while parsing a number coded
//         in scientific notation.  The precompiler expected to find a signed
//         integer following the exponentiation indicator (E), but found
//         something else.
// *Action: Reformat the number correctly.
/ The following is a fake message--leave it as a place holder!
71,0,      "Unable to open message file."
// *Cause: The precompiler was unable to open the message file containing
//         the messages that can be issued by the precompiler.  This can
//         happen if there are too many open files or if there were problems
//         with installation of the precompiler.
// *Action: Check that the limit for open files is high enough (check with the
//          system manager).  Otherwise, contact customer support.
72,0,	"Input file name length exceeds the maximum length"
// *Cause: The file name length specified exceeded the maximum length.  Some
//         operating systems have a maximum file name length. 
// *Action: Use a file name of length less than or equal to the maximum
//          platform specific file name length.
73,0,	"Cursor is declared but never OPENed at line %u in file %s."
/                                     ****
// *Cause: A cursor was DECLAREd but was not referenced in an OPEN statement.
//         This is only an informational message.
// *Action: Remove the cursor declaration or code an OPEN statement for the
//          cursor.
75,0,   "\":\" expected before indicator variable"
//           An indicator variable is not preceded by the required colon.
// *Cause: An indicator variable was not prefixed with a colon, as required.
// *Action: Prefix a colon to the indicator variable in question.
76,0,   "DISPLAY type must be SIGN LEADING SEPARATE"
/        *******              *********************
// *Cause: This message is issued only by Pro*COBOL.  DISPLAY SIGN LEADING
//         SEPARATE is the only DISPLAY type supported by Pro*COBOL.
// *Action: Check the spelling of the variable declaration.  If necessary,
//          remove the reference to the unsupported DISPLAY type.
77,0,  "Colon usage with numeric label in WHENEVER statement is not ANSI"
/                                         ********
// *Cause: An Oracle extenstion to the ANSI/ISO SQL standard was used.
//         Specifically, a numeric WHENEVER ... GOTO label was prefixed with
//         a colon.  For exammple the code might have looked like
//         EXEC SQL WHENEVER SQLERROR GOTO :99;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, prefix
//          alphanumeric (but not numeric) WHENEVER ... GOTO labels with a
//          colon.
78,0,   "FIPS warning: Invalid ANSI SQL Identifier"
/        ****                  ********
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the name given to a host variable:
//           o is longer than 18 characters,
//           o does not begin with a letter, or
//           o contains consecutive or trailing underscores.
//         In the following Pro*C example, the host variable name is 19
//         characters long and therefore non-compliant:
//           EXEC SQL BEGIN DECLARE SECTION;
//           int department_location:  -- not ANSI/ISO compliant
//           EXEC SQL END DECLARE SECTION;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, change the
//          host variable name so that it is <= 18 characters long, begins with
//          a letter, and does not contain consecutive or trailing underscores.
79,0,   "ANSI requires colon on label in WHENEVER statement"
/        ****                            ********
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, an alphanumeric WHENEVER ... GOTO label was not
//         prefixed with a colon.  For example the offending code might look
//         like:
//           EXEC SSQL WHENEVER NOT FOUND GOTO no_more;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, prefix
//          alphanumeric (but not numeric) WHENEVER ... GOTO labels with a
//          colon.
80,0,   "TYPE identifier already TYPEd"
/        ****                    ****
// *Cause: The identifier being TYPEd in an EXEC SQLY TYPE statement appeared
//         in a previous EXEC SQL TYPE statement.  A given identifier can
//         appear in only one EXEC SQL TYPE statement.
// *Action: Check the spelling of the identifiers.  Use different identifiers
//          in the EXEC SQL TYPE statements, or remove one of the EXEC SQL
//          TYPE statements.
81,0,   "Scale specification not allowed for given datatype"
// *Cause: The Oracle external datatype referenced in an EXEC SQL VAR or EXEC
//         SQL TYPE statement does no allow a scale specification.
// *Action: Check the precision specification and remove the scale
//          specification.
82,0,   "Length and scale specifications must be an integer"
// *Cause: A floating point number or a non-number to specify a length or
//         scale was used.  Only integers can be used.
// *Action: Correct or remove the length and/or scale specification.
83,0,   "Bind and define variables not allowed in CREATE statement"
/                                                 ******
// *Cause: Host variables cannot appear in a CREATE statement.  If the makeup
//         of a CREATE statement cannot be known until run time, a dynamic
//         SQL statement must be used to execute it.  That is, the program
//         must accept or build the CREATE statement at run time, store it in
//         a host string, then EXECUTE it.
// *Action: Correct or remove the erroneous CREATE statement.
85,0,   "Error writing to file %s"
// *Cause: The precompiler was unable to write to the named output file.  Some
//         possible causes follow:
//           o Sufficient file access privileges were not defined.
//           o Another user has locked the file.
//           o There is not enough disk space.
//           o There are too many open files.
// *Action: Check that sufficient privileges exist to access the file and that
//          it is not locked by another user.  Also check that there is enough
//          disk space and that the limit for open files is set high enough
//          (check with system manager).
86,0,   "Source file %s has zero length"
// *Cause: The source file specified on the command line contains no code.
//         Consequently, there is nothing for the precompiler to process.
// *Action: Specify a valid source file containing embedded SQL statements.
87,0,   "EXEC SQL TYPE statement not allowed for this host language"
/        *************
// *Cause: An EXEC SQL TYPE statement was used with a host language that does
//         not support user-defined datatype equivalencing.  This feature is
//         available only in Pro*C and Pro*Pascal.
// *Action: Remove the offending EXEC SQL TYPE statement.
88,0,   "User defined type identifier expected"
// *Cause: The user-defined datatype name in an EXEC SQL TYPE statement is
//         missing or misspelled, is a reserved word, is not a legal identifier
//         in the host-language or conflicts with a base datatype in that
//         language.
// *Action: Check the spelling of the user-defined datatype name.  If
//          necessary, declare a valid user-defined datatype.  User-defined
//          datatype equivalencing is available only in Pro*C and Pro*Pascal.
89,0,   "Invalid Oracle TYPE specification"
/                ***********
// *Cause: The Oracle external datatype name in an EXE SQL TYPE or EXEC SQL VAR
//         statement is missing or misspelled.
// *Action: Check the spelling of the external datatype name.  If necessary,
//          supply the missing datatype name.
90,0,   "Precision/scale specification must be given for DECIMAL datatype"
/                                                        *******
// *Cause: A precision and/or scale specification for the Oracle external
//         datatype DECIMAL in an EXEC SQL TYPE or EXEC SQL VAR statement
//         was omitted.
// *Action: Add the precision and/or scale specification to the EXEC SQL TYPE
//          or EXEC SQL VAR statement.
91,0,   "TYPE statement requires format specification for this Oracle datatype"
/        ****                                                  ******
// *Cause: A length, precision, and/or scale specification for an Oracle
//         external datatype in an EXEC SQL TYPE or EXEC SQL VAR statement
//         was omitted.
// *Action: Add the length, precision, and/or scale specification for the
//          external datatype to the EXEC SQL TYPE or EXEC SQL VAR statement.
92,0,   "Length and/or scale incompatible with specified Oracle datatype"
/                                                        ******
// *Cause: An invalid length or scale for an Oracle external datatype in an
//         EXEC SQL TYPE or EXEC SQL VAR statement was specified.
// *Action: Check that a length large enough to accommodate the external
//          datatype is specified.  If a scale is specified, check that it
//          lies in the range -84..99.
93,0,   "Invalid or obsolete option, ignored"
// *Cause: The precompiler found an option available in a prior version or
//         different host language but not in the current version or host
//         language.
// *Action: Remove the option specification.
94,0,   "Array length for char[n] datatype must be >= 2"
/                         *******
// *Cause: When MODE={ANSI | ANSI14}, a length of less than 2 characters for
//         a char[n] host variable was specified or a simple char variable was
//         specified.  When MODE={ANSI | ANSI14}, the length must be at least
//         2 characters.  This message is issued only by the Pro*C precompiler.
// *Action: Correct the declaration so that it specifies a length of at least
//          2 characters.
95,0,   "Missing PROGRAM, SUBROUTINE, FUNCTION, or BLOCK DATA statement"
/                *******  **********  ********     **********
// *Cause: FORTRAN source files are expected to have at least one PROGRAM,
//         SUBROUTINE, FUNCTION, or BLOCK DATA statement, which the precompiler
//         uses to detect the beginning of a routine or compilation unit.
// *Action: Add one of these statements to the source file.
96,0,   "Array FETCH not allowed for mode=ANSI14"
/              *****                 ***********
// *Cause: When MODE=ANSI14, an array SELECT or FETCH was attempted.  However,
//         array operations are not allowed with MODE=ANSI14.
// *Action: If MODE=ANSI14 must be specified, place the SELECT or FETCH
//          statement in a host-language loop, instead of using the array
//          interface.
97,0,   "Use of DECIMAL and DISPLAY types allowed only for COBOL and PL/I"
/               *******     *******                        *****     ***
// *Cause: The DECIMAL and DISPLAY external datatype was used in an EXEC SQL
//         VAR or EXEC SQL TYPE statement with an Oracle precompiler other
//         than Pro*COBOL or PRO*PL/I.  These external datatypes are available
//         only in Pro*COBOL and PRO*PL/I.
// *Action: Remove the reference to the DECIMAL or DISPLAY external datatype
//          from the EXEC SQL TYPE or EXEC SQL VAR statement.
98,0,   "Scale specification cannot be used in this context"
// *Cause: In a Pro*C, Pro*FORTRAN, Pro*Pascal program, scale in an EXEC SQL
//         TYPE or EXEC SQL VAR statement in the current context cannot be
//         specified.
// *Action: Remove the scale specification from the EXEC SQL TYPE or EXEC SQL
//          VAR statement.
99,0,   "Length cannot be given for types ROWID, DATE, or MLSLABEL"
/                                         *****  ****     ********
// *Cause: A length for the ROWID, DATE, or MLSLABEL external datatype was
//         specified in an EXEC SQL TYPE or EXEC SQL VAR statement.  This is
//         unnecessary because those are fixed length types.
// *Action: Remove the length specification from the EXEC SQL TYPE or EXEC
//          SQL VAR statement.
100,0,  "Non integer label is not ANSI"
/                                 **** (can be replaced with ISO)
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a non-integer WHENEVER ... GOTO label was in a
//         Pro*Pascal program.  For example, the offending code might look
//         like:
//           EXEC SQL WHENEVER NOT FOUND GOTO quit;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action:No action required. However, for ANSI/ISO compliance, use 
//         only integer WHENEVER... GOTO labels in a Pro*Pascal program. 
101,0,  "Lower case 'e' in floating point number is not ANSI"
/                                                       **** (can be ISO)
// *Cause: A Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a lowercase 'e' was used in scientific notation.  For
//         example, the offending code might look like:
//           maxnum = 10e38;
//         This informational message is issued by the FIPS Flagger 
//         when FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, use an
//          uppercase 'E' in scientific notation.
102,0,  "FOR UPDATE is an Oracle extension"
/        **********       ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the FOR UPDATE OF clause was used in a cursor
//         declaration.  For example, the offending code might look like:
//           EXEC SQL DECLARE emp_cursor CURSOR FOR
//               SELECT ENAME, SAL FROM EMP WHERE DEPTNO = :dept_number
//                   FOR UPDATE OF SAL;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the FOR UPDATE OF clause.
103,0,  "AT clause is an Oracle extension"
/        **              ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the AT <db_name> clause was used in a SQL statement.
//         For example, the offending code might look like:
//           EXEC SQL AT oracle3 COMMIT RELEASE;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the AT <db_name> clause.
104,0,  "FOR clause is an Oracle extension"
/        ***              ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the FOR clause was used in an array-processing SQL
//         statement.  For example, the offending code might look like:
//           EXEC SQL FOR :limit INSERT INTO EMP (EMPNO, JOB, DEPTNO)
//               VALUES (:emp_number, :job_title, :dept_number);
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the FOR clause.
105,0,  "Keyword WORK required here by ANSI"
/                ****                  **** (can be replaced by ISO)
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the keyword WORK was used in a COMMIT or ROLLBACK
//         statement.  For example, the offending code might look like:
//           EXEC SQL COMMIT WORK RELEASE;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the keyword WORK.
106,0,  "RELEASE is an Oracle extension to the COMMIT and ROLLBACK statements"
/        *******       ******                  ******     ********
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the parameter RELEASE was used in a COMMIT or ROLLBACK
//         statement.  For example, the offending code might look like:
//           EXEC SQL ROLLBACK RELEASE;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the parameter RELEASE;
107,0,  "The CONNECT statement is Oracle implementation dependent"
/            *******              ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, the CONNECT statement was used to log on to ORACLE.
//         For example, the offending code might look like:
//           EXEC SQL CONNECT :username IDENTIFIED BY :password;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, specify the
//          AUTO_CONNECT command-line option instead of using a CONNECT
//          statement.
108,0,  "This statement is not supported by ANSI"
/                                           **** (can be replaced by ISO)
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a nonconforming SQL statement such as PREPARE was
//         used.  For example, the offending code might look like:
//           EXEC SQL PREPARE sql_statement FROM :sql_string;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the nonconforming statement.
109,0,  "Dynamic SQL and PL/SQL are Oracle extensions to ANSI SQL"
/                ***     ******     ******               ********
/                                              (ANSI can be replaced by ISO)
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, dynamic SQL or embedded PL/SQL was used.  For
//         example, the offending code might look like:
//           EXEC SQL EXECUTE
//               BEGIN
//                   SELECT ...
//               END;
//           END-EXEC;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          dynamic SQL or embedded PL/SQL.
110,0,  "Oracle extension to the WHENEVER statement"
/        ******                  ********
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a nonconforming keyword such as NOTFOUND, STOP, RAISE,
//         or DO was used in the WHENEVER statement.  (Note that NOT FOUND is
//         ANSI-compliant.)  For example, the offending code might look like:
//           EXEC SQL WHENEVER SQLERROR STOP;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          the nonconforming keyword.
111,0,  "SQLCHECK value in EXEC ORACLE statement exceeds command line value"
/        ********          ***********
// *Cause: The SQLCHECK option was entered inline and specified a level of
//         checking higher than the level specified (or accepted by default) on
//         the command line.  This is not allowed.  For example, if
//         SQLCHECK={SYNTAX | LIMITED} is specified on the command line,
//         SQLCHECK={SEMANTICS | FULL} cannot be specified inline. 
// *Action: Revise the EXEC ORACLE statement or specify a lower level of
//          checking on the command line.
112,0,  "Datatype not supported by ANSI"
/                                  **** (can be replaced by ISO)
// *Cause: An Oracle extension to the ANSI/ISO standard was used.
//         Specifically, aa pointer or nonconforming datatype such as VARCHAR
//         was used.  For example, the offending code might look like:
//           EXEC SQL BEGIN DECLARE SECTION
//             VARCHAR username[20];
//           EXEC SQL END DECLARE SECTION
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          pointers or nonconforming datatypes.
113,0,  "Value of DBMS option invalid with given value of MODE option"
/                 ****                                    ****
// *Cause: When MODE={ANSI14 | ANSI13}, DBMS=V7 was specified, or when
//         MODE=ANSI, DBMS=v6 was specified.  These option settings are
//         incompatible.  Note that the DBMS option was not available before
//         release 1.5 of the Oracle Precompilers.
// *Action: With DBMS=V7, instead of MODE={ANSI14 | ANSI13}, specify
//          MODE={ANSI | ORACLE}.  With DBMS=V6, instead of MODE=ANSI,
//          specify MODE={ANSI14 | ANSI13 | ORACLE}, but MODE=ORACLE is
//          recommended.
114,0,  "Length spec required in EXEC SQL VAR statements for VARxxx types"
/                                ************                ******
// *Cause: In an EXEC SQL VAR statement, a VARCHAR or VARRAW external datatype
//         was specified without a length.  Unlike other types, the maximum
//         length of the data field must be specified for VARCHAR and VARRAW.
// *Action: Add a length specification to the EXEC SQL VAR statement.
115,0,  "Array required here"
// *Cause: In an ARRAYLEN statement, the name of a previously declared host
//         array was not specified.  The first host variable in an ARRAYLEN
//         statement must be an array.  The second host variable, which
//         specifies an array dimension, must be a 4-byte integer.  The correct
//         syntax follows:
//           EXEC SQL ARRAYLEN host_array (dimension);
//         The ARRAYLEN statement must appear in the Declare Section along
//         with, but somewhere after, the declarations of host_array and
//         dimension.
// *Action: Check the spelling of both identifiers in the ARRAYLEN statement.
//          If necessary, supply the missing host array name.
116,0,  "This array already given in an ARRAYLEN statement"
/                                       ********
// *Cause: The same host array was specified in two different ARRAYLEN
//         statements.  A given host array cannot be specified in more than one
//         ARRAYLEN statement.
// *Action: Check the spelling of the host array names in both ARRAYLEN
//          statements.  Change one of the names so that they refer to
//          different host arrays or remove one of the ARRAYLEN statements.
117,0,  "Invalid ARRAYLEN length variable type"
/                ********
// *Cause: A valid array dimension was not specified in an ARRAYLEN statement.
//         The array dimension must be specified using a previously declared
//         4-byte integer host variable, not a literal or expression.  For
//         example, the offending code might look like:
//           EXEC SQL ARRAYLEN ename_array (25);  -- illegal dimension
// *Action: Supply a valid array dimension.  If necessary, declare a 4-byte
//          integer host variable for use in the ARRAYLEN statement.
118,0,  "Use of host variable initialization not supported by ANSI SQL"
/                             (ANSI can be replaced by ISO)   ********
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a host variable was initialized in its declaration,
//         as shown in the following Pro*C example:
//           EXEC SQL BEGIN DECLARE SECTION;
//              int dept_number = 20;  -- not ANSI/ISO-compliant
//           EXEC SQL END DECLARE SECTION;
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not
//          initialize host variables in their declarations.
119,0,  "Value of const variable in INTO clause will be modified"
/                 *****             ****
// *Cause: A variable declared with the type specifier "const" was used in an
//         INTO clause.  Such variables should not be modified and should not
//         be used in an INTO clause.
// *Action: Check the spelling of all identifiers in the INTO clause.  If
//          necessary, remove "const" from the host variable declaration or use
//          a different host variable.
120,0,	"File I/O error during code generation"
// *Cause: A file I/O error occurred during code generation.  This may be
//         caused by insufficient disk space.
// *Action: Check that there is enough disk space.
121,0,	"Arrays of VARCHAR pointers are not supported"
/                  *******
// *Cause: An array of pointers was declared, which is not allowed.  However,
//         pointers to scalar types are allowed.  With Pro*C, declare pointers
//         to char[n] and varchar[n] variables as pointers to CHAR or VARCHAR
//         (with no length specification).
// *Action: Correct or remove the declaration.
122,0,	"Input file name and output file name are identical"
// *Cause: On the command line, the same pathname for INAME and ONAME was
//         specified, which designates the precompiler input and output files,
//         respectively.
// *Action: Change one of the path/filenames.
123,0,  "Entire VARCHAR declaration must be on same line"
/               *******
// *Cause: In a Pro*C program, a VARCHAR declaration spans more than one line,
//         which is not allowed.
// *Action: Revise the declaration so that it uses only one line.
124,0,  "COMMON_NAME option is specified too late"
/        ***********                
// *Cause: In a FORTRAN program, subroutine, or function, the precompiler
//         option COMMON_NAME was mistakenly specified after the PROGRAM,
//         SUBROUTINE, or FUNCTION statement.  If COMMON_NAME is specified
//         inline, its EXEC ORACLE OPTION statement must precede the PROGRAM
//         SUBROUTINE, or FUNCTION statement.
// *Action: Relocate the EXEC ORACLE OPTION statement or specify COMMON_NAME
//          on the command line.
126,0,  "Could not find or open system configuration file"
// *Cause: The precompiler was unable to find or open the system configuration
//         file (a text file containing preset command-line options, which the
//         precompiler uses by default).  Some possible causes follow:
//           o The file does not exist.
//           o The search path to the file is incorrect.
//           o File access privileges are insufficient.
//           o There are too many open files.
//         However, this message is just a warning.  Processing continues even
//         if the system configuration file does not exist.
// *Action: Check that the file exists, that the search path to the file is
//          correct, and that sufficient privileges exist to access the file.
//          Also check that the limit for open files is set high enough (check
//          with the system manager).
127,0,  "%s"
// *Cause: This is a generic error message from the command-line processor.
// *Action: Correct the indicated error.
128,0,  "Command line processor severe error"
// *Cause: The command line processor encountered a severe error.
// *Action: After making sure that all the command-line options are specified
//          correctly, call customer support with a full account of all the
//          options and configuration files used.
129,0,  "Option \"%s\" must be given"
// *Cause: A required command-line option is missing.  For example, the INAME
//         option, which specifies the name of the input file, might be
//         missing.
// *Action: Supply the missing command-line option.
132,0,  "Indicator array size must not be less than its host variable"
// *Cause: An host variable array was used with an indicator array declared
//         with a smaller dimension.  For example:
//           EXEC SQL BEGIN DECLARE SECTION;
//           int   dept_no[20];
//           short dept_no_ind[10];
//           EXEC SQL END DECLARE SECTION;
//           ...
//           SELECT ... INTO dept_no:dept_no_ind ...
// *Action: Increase the size of the indicator array.
133,0,  "Command line option MODE=ANSI required with option NLS_LOCAL=YES"
/                            *********                      *************
// *Cause: The precompiler option NLS_LOCAL=YES was used without also
//         specifying MODE=ANSI.  The precompiler option MODE=ANSI must be
//         specifiied if NLS_LOCAL=YES.
// *Action: Set the precompiler option MODE=ANSI in addition to NLS_LOCAL=YES
//          or do not set NLS_LOCAL=YES.
135,0,  "Result Set Cursor usage is not standard SQL"
/        LLLLLLLLLLLLLLLLL                       ***
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, an Oracle Result Set Cursor has been used.
//         This informational message is issued by the FIPS Flagger when
//         FIPS=YES.
// *Action: No action required.  However, for ANSI/ISO compliance, do not use
//          Result Set Cursors.
136,0,  "Invalid SQL_CURSOR declaration"
/                **********
// *Cause: An array of SQL_CURSOR host variables was declared or, if Pro*COBOL,
//         a PICTURE clause was specified in the SQL-CURSOR declaration.  In
//         Pro*FORTRAN, a length specification (i.e. "*n") on the SQL_CURSOR
//         declaration could have been specified.  These usages are not
//         supported.
// *Action: Check that the SQL_CURSOR variable is not declared as an array or,
//          if Pro*COBOL, that no PICTURE clause is specified for the
//          SQL_CURSOR.  In Pro*FORTRAN, check that there is no length
//          specification (i.e. "*n") for the SQL_CURSOR.
137,0,  "Invalid use of SQL cursor host variable"
/                       **********
// *Cause: A SQL_CURSOR variable was used in an INTO or WHERE clause.
//         SQL_CURSOR variables can be used only where ordinary cursor
//         identifiers would be used or, in a PL/SQL block, where a cursor
//         would normally be used.
// *Action: Remove the SQL cursor variable reference from the INTO clause or
//          WHERE clause, or use a host variable of another type in the
//          INTO or WHERE clause.
138,0,  "Result Set Cursors are not implemented in this precompiler"
/        LLLLLLLLLLLLLLLLLL
// *Cause: There was an attempt to reference a host variable as a cursor
//         reference.  Cursor variables are not implemented in PRO*Pascal or
//         Pro*PL/I.
// *Action: Rewrite your host-language code to use standard SQL cursors.
139,0,  "Cannot change MAXLITERAL after an EXEC SQL statement"
/                      **********          ********
// *Cause: The MAXLITERAL option has been used in an inline EXEC ORACLE OPTION
//         statement after and EXEC SQL, EXEC TOOLS, or EXEC IAF statement.
//         This is not allowed.
// *Action: Use the MAXLITERAL option only on the command line or in an EXEC
//          ORACLE OPTION statement placed at the beginning of the input source
//          file.
140,0,  "CREATE FUNCTION/PROCEDURE/PACKAGE/TRIGGER are Oracle extensions"
/        *****************************************     ******
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, one of the following statements was used:
//           o CREATE FUNCTION
//           o CREATE PROCEDURE
//           o CREATE PACKAGE
//           o CREATE TRIGGER
//         These statements are Oracle extensions to the ANSI/ISO SQL
//         standards. This informational message is issued by the FIPS 
//         Flagger when
//         FIPS=YES.
// *Action: No action is required.  However, for ANSI/ISO compliance, do not
//          use any of these statements.
141,0,  "Thread Safety is not implemented in this precompiler"
// *Cause: There has been an attempt to use CONTEXT sql statements. 
//         The thread safety feature is not implemented in PRO*Pascal,
//         Pro*PL/I, or Pro*C 1.x.
// *Action: Rewrite your host-language code to not use contexts.
142,0,  "No EXEC SQL CONTEXT USE statement encountered"
/           ********************
// *Cause: No EXEC SQL CONTEXT USE statement was encountered and the
//         option threads=yes was requested.
// *Action: Ensure that the necessary context variable (of type sql_context)
//          has been declared, ALLOCATEd, and USEd prior to any executable
//          SQL statements.
143,0,  "Runtime context variable not of correct type"
// *Cause: The runtime context variable referecned in an EXEC SQL CONTEXT USE
//         statement is not of type sql_context.
// *Action: Declare your runtime context variable of type sql_context.
144,0,  "UNSAFE_NULL=YES must be used with DBMS=V7 and MODE=ORACLE"
// *Cause: The option UNSAFE_NULL=YES has been used with DBMS=V6 or
//         DBMS=NATIVE (the default) or has been used with
//         MODE=ANSI/ANSI14/ANSI13.
// *Action: Either specify DBMS=V7 and MODE=ORACLE (the default) when 
//         using UNSAFE_NULL=YES or do not use UNSAFE_NULL=YES.
145,0,  "This statement can only be used with THREADS=YES"
/                                             ***********
// *Cause: EXEC SQL ENABLE THREADS or one of the EXEC SQL CONTEXT statements
//         has been used, even though option THREADS is set to NO.
// *Action: Specify option THREADS=YES or remove the EXEC ENABLE THREADS or
//          EXEC SQL CONTEXT statement from the source code.
146,0,  "Illegal value for host option, ignored"
// *Cause: An invalid host language was specified using the command-line
//         host option.  The host option valid values are pro* language
//         specific.  For example, for profor, the only valid value is 
//         FORTRAN.  For procob, the only valid values are COBOL and COB74.
// *Action: Specify a valid host language with the host option.
147,0,  "DBMS=V6 no longer supported; using DBMS=NATIVE"
/        *******                            ***********
// *Cause: V6 compatibility is no longer supported.  The precompiler will
//         precompile as though DBMS=NATIVE was specified.
// *Action: Revise the specified DBMS option value from v6 to another value
//          as desired.
/
/	PC0 Err Messages.
/
1000,0,	"You are not authorized to run Pro*COBOL"
/                                      *********
// *Cause: The authorization or license to run the Pro*COBOL Precompiler has
//         expired.
// *Action: Call customer support for assistance.
1001,0,	"Your Pro*COBOL authorization is about to expire"
/             *********
// *Cause: The authorization or license to run the Pro*COBOL Precompiler is
//         about to expire.
// *Action: Call customer support for assistance.
1002,0,	"Invalid character \"%c\" in indicator area at line %u in file %s"
// *Cause: In a Pro*COBOL Precompiler program, only a blank, hyphen (-),
//         asterisk (*), slash (/), or letter "D" is allowed in the indicator
//         area, but the precompiler found another character.
// *Action: Remove or replace the invalid character.  If the FORMAT=ANSI option
//          is specified, check for an end-of-line in column 7.
1003,0,	"Invalid continuation at line %u in file %s"
// *Cause: In a PRO*COBOL program, a continuation line was completely blank,
//         except for the continuation character.
// *Action: Remove or replace the empty continuation line.
1004,0,	"In an EXEC statement at end-of-file"
/              ****
// *Cause: In a Pro*COBOL input file, the last EXEC statement was not
//         terminated properly.
// *Action: Terminate the last EXEC statement with an END-EXEC.
1005,0,	"PROCEDURE DIVISION not found"
/        ******************
// *Cause: The precompiler could not find the PROCEDURE DIVISION header in a
//         Pro*COBOL program.  Some possible causes follow:
//           o A keyword in the header is missing or misspelled.
//           o There is an apostrophe in the REMARKS section (the precompiler
//               mistook the apostrophe for the beginning of a string literal).
//           o There is an unterminated literal in the WORKING-STORAGE SECTION.
//           o The wrong value for the FORMAT option was specified.
// *Action: Check that the PROCEDURE DIVISION header is in place and spelled
//          correctly, that there is no apostrophe in the REMARKS section, that
//          all literals in the WORKING-STORAGE SECTION are terminated, and
//          that the right value for the FORMAT option is specified.
1006,0,	"EXEC statement cannot begin in Area A at line %u in file %s"
/        ****                           LLLLLL
// *Cause: In a Pro*COBOL program, EXEC statements must begin in Area B, but
//         the precompiler found a statement beginning in Area A.
// *Action: Move the statement rightward so that it begins in Area B.
1007,0,    "WORKING-STORAGE SECTION not found"
/           ***********************
// *Cause: The precompiler could not find the WORKING-STORAGE SECTION header in
//         a Pro*COBOL program, probably because a keyword is missing or
//         misspelled, or the wrong value for the FORMAT option might have
//         been specified.
// *Action: Check that the WORKING-STORAGE SECTION header is in place and
//          spelled correctly and that the right value for the FORMAT option
//          is specified.
1008,0,    "Multiple element records not allowed in DECLARE section"
/                                                   *******
// *Cause: A few COBOL compilers do not allow group items to be passed as
//         parameters in a CALL statement.  (Check the COBOL compiler user's
//         guide.)  If the compiler is one of these, group items within the
//         Declare Section can contain only one elementary item.
// *Action: Assign each host variable its own group item.
1009,0,    "For hostlan = COB74, a SQL statement must be followed by ELSE or \".\""
/               ***************    ***                               ****
// *Cause: In a Pro*COBOL program, an EXEC SQL statement is followed by another
//         statement in the same sentence.  An EXEC SQL statement must be the
//         last statement in a COBOL-74 sentence and so must be terminated by
//         the keyword ELSE or a period.
// *Action: Change the program logic, making the EXEC SQL statement the last
//          statement in the sentence.
1010,0, "Invalid use of NULL character in character literal"
// *Cause: A null character (binary zero) was found in a string literal.  This
//         is not allowed by Pro*COBOL.
// *Action: Remove the null character from the string literal.
1011,0, "USAGE IS BINARY clause must be terminated by \".\" on same line"
/        ***************                              *****
// *Cause: The period terminating the USAGE IS BINARY clause must be on the
//         same line as the USAGE clause.  This message only occurs on systems
//         that support the COMP5=YES command line option of Pro*COBOL, where
//         where COMP-5 is substituted for BINARY.
// *Action: Check that the period terminating the USAGE IS BINARY clause is on
//          the same line as the USAGE clause.
1012,0,	"DATA DIVISION not found"
/        *************
// *Cause: The Pro*COBOL precompiler did not find a DATA DIVISION in the
//         input source file.  Pro*COBOL applications are required to have
//         a DATA DIVISION.
// *Action: Add a DATA DIVISION to the input source file.
1013,0, "Invalid use of PIC N array variable \"%s\" at line %u in file %s"
/                       *****
// *Cause: A PIC N variable was declared using an OCCURS clause.  Tables of
//         PIC N variables are not supported by the Pro*COBOL precompiler.
// *Action: Declare the PIC N variable without an OCCURS clause or, if the
//          PIC N variable is not used in any SQL statements, declare it
//          outside the Declare Section.
1014,0,  "\"VARYING\" not supported with PIC N PICTURE clause"
/        ************                    *************
// *Cause: The keyword VARYING was used in a PIC N variable declaration.
// *Action: Remove the keyword VARYING from the variable declaration.  If you
//          want to declare a PIC N VARCHAR variable, specify the precompiler
//          option VARCHAR=YES and declare the variable as an implicit VARCHAR
//          group item as illustrated by the following example:
//            EXEC SQL BEGIN DECLARE SECTION END-EXEC.
//                ...
//                01  ENAME.
//                    05  ENAME-LEN  PIC S9(4) COMP.
//                    05  ENAME-ARR  PIC N(20).
//                ...
//            EXEC SQL END DECLARE SECTION END-EXEC.
1015,0,  "Cannot equivalence PIC N variable %s"
/                           *****
// *Cause: A PIC N variable or an implicit VARCHAR group item (with a PIC N
//         variable as an elementary item) was used in an EXEC SQL VAR
//         statement.  This is not allowed.
// *Action: Do not use the PIC N variable in an EXEC SQL VAR statement.  If
//          you want an equivalence to an Oracle type using an EXEC SQL VAR
//          statement, use a PIC X variable, instead of a PIC N variable.
1016,0,  "\"N\" character literals not supported in embedded PL/SQL"
/        *****
// *Cause: An "N" character literal was used within a PL/SQL block
// *Action: Remove the "N" character literal from the PL/SQL block.
1017,0,  "The SQLCA and a SQLCODE variable cannot both be used"
// *Cause: The SQLCA has been included and a SQLCODE variable has been
//         declared.  This is not allowed as references to the SQLCODE
//         variable are ambiguous and will result in COBOL compiler errors.
// *Action: Use either the SQLCA or the SQLCODE variable.  Remove either the
//          include of the SQLCA or the SQLCODE variable declaration.
1018,0,  "Conversion buffer size can only be specified for character types"
// *Cause: A CONVBUFSZ clause has been used in an EXEC SQL VAR statement
//         where the variable is not of a character datatype.
// *Action: Remove the CONVBUFSZ clause from the EXEC SQL VAR statement.
1019,0,  "Invalid conversion buffer size"
// *Cause: The size specified in a CONVBUFSZ clause must be an integer in the
//         range 1-32765.  Either the size given is not an integer or is
//         outside the required range.
// *Action: Specify an integer in the range 1-32765.
/
/	PC1 Err Messages.
/
1100,0,	"You are not authorized to run Pro*FORTRAN"
/                                      ***********
// *Cause: The authorization or license to run the Pro*FORTRAN Precompiler has
//         expired.
// *Action: Call customer support for assistance.
1101,0,	"Your Pro*FORTRAN authorization is about to expire"
/             ***********
// *Cause: The authorization or license to run the Pro*FORTRAN Precompiler is
//         about to expire.
// *Action: Call customer support for assistance.
1102,0,	"Invalid label at line %u in file %s"
/          An invalid FORTRAN statement label was found in columns 1-6.
// *Cause: The Pro*FORTRAN Precompiler found an invalid FORTRAN statement label
//         in columns 1 through 6.
// *Action: Correct or remove the statement label.
/
/	PC2 Err Messages.
/
1200,0,	"You are not authorized to run Pro*C"
/                                      *****
// *Cause: The authorization or license to run the Pro*C Precompiler has
//         expired.
// *Action: Call customer support for assistance.
1201,0,	"Your Pro*C authorization is about to expire"
/             *****
// *Cause: The authorization or license to run the Pro*C Precompiler is
//         about to expire.
// *Action: Call customer support for assistance.
1202,0, "Identifier \"%s\" truncated to 31 characters"
// *Cause: A host identifier (the name of a host variable, for example) was
//         truncated to the maximum length (31 characters) allowed by the
//         precompiler.
// *Action: No action required.  This message is just informational.
/
/	PC3 Err Messages.
/
1300,0,	"You are not authorized to run Pro*PL/I"
/                                      ********
// *Cause: The authorization or license to run the Pro*PL/I Precompiler has
//         expired.
// *Action: Call customer support for assistance.
1301,0,	"Your Pro*PL/I authorization is about to expire"
/             ********
// *Cause: The authorization or license to run the Pro*PL/I Precompiler is
//         about to expire.
// *Action: Call customer support for assistance.
/
/	PC4 Err Messages.
/
1400,0,	"You are not authorized to run Pro*Pascal"
/                                      **********
// *Cause: The authorization or license to run the Pro*Pascal Precompiler has
//         expired.
// *Action: Call customer support for assistance.
1401,0,	"Your Pro*Pascal authorization is about to expire"
/             **********
// *Cause: The authorization or license to run the Pro*Pascal Precompiler is
//         about to expire.
// *Action: Call customer support for assistance.
/
/	PC5 Err Messages.
/
1500,0,	"You are not authorized to run Pro*Ada"
/                                      *******
// *Cause: The authorization or license to run the Pro*Ada Precompiler has
//         expired.
// *Action: Call customer support for assistance.
1501,0,	"Your Pro*Ada authorization is about to expire"
/             *******
// *Cause: The authorization or license to run the Pro*Ada Precompiler is
//         about to expire.
// *Action: Call customer support for assistance.
1510,0,	"No Package, Procedure or Function statement seen in %s"
/           *******  *********    ********
// *Cause: Every Ada source file must have a package, procedure, or function
//         statement.  The precompiler did not find one.
// *Action: Add the appropriate statement(s) to the source file and rerun
//          Pro*Ada.
1511,0, "Identifier on line %d in file %s too long for code generated in file %s"
// *Cause: An identifier used in the host program is of a length that causes
//         precompiler-generated code to exceed the length limitation on
//         source lines.
// *Action: Use a shorter identifier or use the ORECLEN option to increase the
//          allowed line length.
1512,0, "Invalid EXEC SQL INCLUDE of file %s found at line %u in file %s"
/                ****************
// *Cause: The EXEC SQL INCLUDE statement is not allowed in Pro*Ada.
// *Action: Embed required source text directly in the Pro*Ada file.  Use the
//          "with" context clause to include required packages.
1513,0, "FIPS warning: Unsupported datatype in line %u of file %s"
/        ****
// *Cause: An Oracle extension to the ANSI/ISO SQL standard was used.
//         Specifically, a host variable was declared with a non-ANSI/ISO
//         standard type.
// *Action: No action required.  However, for ANSI/ISO compliance, use only
//          ANSI/ISO standard types.
/1514 is available for use
1515,0, "FIPS warning: Undeclared host variable \"%s\" at line %u in file %s"
/        ****
// *Cause:  An Oracle extension to the ANSI/ISO SQL standard was used.
//          Specifically, a host variable was declared outside of a Declare
//          Section.
// *Action: No action required.  However, for ANSI/ISO compliance, declare the
//          host variable within a Declare Section.
/
/ Beginning of Fixed String Table
// NLS Nomally do not translate [2000,2099] (With exceptions explained below)
//   DO translate words marked with TTTTT. Do translate words marked LLLL
//   if you can located a translation.
2000,0, ""
2001,0, "INTO/Bind variable"
/                  TTTTTTTT
2002,0, "End-of-SQL-stmt"
/        TTTTTTT   TTTTT
2003,0, ":<host_var>"
/          TTTTTTTT
// NLS_DO_NOT_TRANSLATE [2004,2008]
2004,0, "GET"
2005,0, "PUT"
2006,0, "Block.Field"
2007,0, "INTO"
2008,0, "VALUES"
2009,0, "VALUES (...) clause"
/                     TTTTTT
2010,0, "End-of-VALUES-clause"
/        TTTTTTT      TTTTTTT
// NLS_DO_NOT_TRANSLATE [2011,2015]
2011,0, "SQ0"
2012,0, "SQL"
2013,0, "SQLCA "
2014,0, "SQLCA, "
2015,0, "&sqlca, "
2016,0, "<host_var>"
/         TTTTTTTT
// NLS_DO_NOT_TRANSLATE[2017,2017]
2017,0, "]"
2018,0, "End-of-File"
/        TTTTTTTTTTT
2019,0, "<unsigned_integer>"
/         TTTTTTTTTTTTTTTT
// NLS_DO_NOT_TRANSLATE [2020, 2028]
2020,0, ")"
2021,0, "("
2022,0, ",ANY"
2023,0, "STATEMENT"
2024,0, "CURSOR"
2025,0, "DEFINE"
2026,0, "DATABASE"
2027,0, "undefined"
2028,0, "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
2029,0, "<dbs_id>"
/         TTTTTT  (abbreviation for "database identifier", translate as
/                     appropriate.
// NLS_DO_NOT_TRANSLATE [2030,2031]
2030,0, "FOR"
2031,0, "AT"
2032,0, ":<host_var> or string/numeric const"
/          TTTTTTTT  TTTTTTTTTTTTTTTTTTTTTTT
// NLS_DO_NOT_TRANSLATE [2033,2045]
2033,0, "&"
2034,0, "Pro*COBOL"
2035,0, "yes"
2036,0, "no"
2037,0, "long"
2038,0, "short"
2039,0, "quote"
2040,0, "apost"
2041,0, "ansi14"
2042,0, "terminal"
2043,0, "none"
2044,0, "Options:"
2045,0, "v"
2046,0, "PICTURE clause"
/                LLLLLL
// NLS_DO_NOT_TRANSLATE [2047,2050]
2047,0, "END-EXEC"
2048,0, "TIMES"
2049,0, "CONTINUE."
2050,0, "."
2051,0, "<integer>"
/         TTTTTTT
// NLS_DO_NOT_TRANSLATE [2052,2053]
2052,0, ":"
2053,0, "Iaddress"
2054,0, "End-of-Statement"
/        TTTTTTTTTTTTTTTT
//NLS_DO_NOT_TRANSLATE [2055,2081]
2055,0, "oracle"
2056,0, "limited"
2057,0, "full"
2058,0, "ansi13"
2059,0, "iso13"
2060,0, "ansi13/iso13"
2061,0, "iso14"
2062,0, "ansi14/iso14"
2063,0, "ROLLBACK TO "
2064,0, "FOR UPDATE"
2065,0, "IS"
2066,0, "Pro*FORTRAN"
2067,0, "Pro*C"
2068,0, "Pro*PL/I"
2069,0, "Pro*Pascal"
2070,0, "Pro*Ada"
2071,0, "syntax"
2072,0, "semantics"
2073,0, "ansi"
2074,0, "iso"
2075,0, "ansi/iso"
2076,0, "kr_c"
2077,0, "ansi_c"
2078,0, "v6"
2079,0, "v7"
2080,0, "v"
2081,0, "native"
2082,0, "<literal>"
/         TTTTTTT
// NLS_DO_NOT_TRANSLATE [2083,2083]
2083,0, "v8"

/ If you add a new fixed string, update PCCFSTSZ in pccdef.h
/ End of Fixed String Table
/ Beginning of other new strings
// NLS Do translate except words marked "***" and %s, %u, etc. [2100,2299]
2100,0, "Allocated memory block has been overfilled.\n"
2101,0, "PRO* Internal Error detected while attempting pccfre(%8.x,%u).\n"
/        ****                                          ******
2102,0, "PRO* Internal Error detected while attempting pccrlc(%8.x,%u,%u).\n"
/        ****                                          ******
2103,0, "Command line options:\n"
2104,0, "integer"
2105,0, "symbol"
2106,0, "host_language"
2107,0, "input_filename"
2108,0, "include_path"
2109,0, "list_filename"
2110,0, "output_filename"
2111,0, "AM_ID"
/        *****
/        This thing is obsolete anyway.
2112,0, "usr"
/         "usr" and "pwd" are abbreviations for "user" and "password"
/         Translate appropriately.
2113,0, "pwd"
2114,0, "Size of Context Area (in K)"
/                ************
/ "K" is the American abbreviation for "1000s"
2115,0, "If yes, use ASA carriage control"
/           ***      ***
2116,0, "Beginning FORTRAN label to generate"
/                  *******
2117,0, "Define a symbol for use in IFDEF"
/                                   *****
2118,0, "End FORTRAN label to generate"
/            *******
2119,0, "If yes, display errors to terminal"
/           ***
2120,0, "Input file format"
2121,0, "If yes, hold OraCursor (don't reassign)"
/           ***       *********
2122,0, "COBOL, COB74, FORTRAN, Pascal, PLI"
/        **********************************
2123,0, "Input filename"
2124,0, "Pathname for EXEC SQL INCLUDE files"
/                     ****************
2125,0, "If yes, generate inline code (no AM)"
/           ***
2126,0, "Input file record format"
2127,0, "Input file record length"
2128,0, "COBOL literal delimiter"
/        *****
2129,0, "Left margin (PL/I only)"
/                     ****
2130,0, "List filename"
2131,0, "List file record format"
2132,0, "List file record length"
2133,0, "List type"
2134,0, "Max len of literal string"
2135,0, "Max nr of OraCursors in Cursor Cache"
2136,0, "If ansi, follow ANSI standards"
/           ****         **** (the "ANSI" in capitals can be replaced with ISO,
/                              but the "ansi" in lower case cannot be.)
2137,0, " (ISO13 is a synonym for ANSI13)"
/          *****                  ******
2138,0, "Output (generated code) filename"
2139,0, "Use ORACA"
/            *****
2140,0, "Output file record format"
2141,0, "Output file record length"
2142,0, "List file page length"
2143,0, "Access Module Identifier"
/           Obsolete message, translation irrelevant
2144,0, "If yes, rebind on every FETCH/USING"
/           ***                  ***********
2145,0, "If yes, generate reentrant code"
/           ***
2146,0, "If yes, release OraCursor after execute"
/           ***
2147,0, "Right margin (PL/I only)"
/                      ****
2148,0, "If yes, generate FOUND error on SELECT"
/           ***           *****          ******
2149,0, "SQL checking level"
/        ***
2150,0, "SQL checking level"
/        ***
2151,0, "Oracle logon user id and password"
/        ******
2152,0, "If yes, generate xref for PRO* symbols"
/           ***           ****     ****
2153,0, "\n\"[*]\" indicates this option legal via EXEC ORACLE OPTION"
/                                                  ******************
2154,0, "UNKNOWN"
2155,0, "Precompiling %s\n"
2156,0, "Userid: "
2157,0, "Password: "
2158,0, "Current Options"
2159,0, "Page "
2160,0, "Statistics"
2161,0, "Return code: %u"
2162,0, "Number of messages at severity %c: %u"
2163,0, "Number of input lines: %u"
2164,0, "Number of host variables declared: %u"
2165,0, "Number of cursor names: %u"
2166,0, "Number of statement names: %u"
2167,0, "Maximum bytes used: %u"
2168,0, "SQL Identifiers"
/        ***
2169,0, "Host Variables"
2170,0, "Ref"
2171,0, "Def"
2172,0, "Line"
2173,0, "in"
2174,0, "Pre-defined symbol"
2175,0, "Fatal error occurred in PL/SQL with current SQL statement."
/                                ******              ***
2176,0, "\nPRO* has detected an internal error (%d).\n"
/          ****
2177,0, "Please contact Oracle Corporation Customer Support.\n"
/                       ******
2178,0, "Current_of_cursor"
/        *****************
2179,0, "pc5fty called!"
/        ******
2180,0, "error - could not find bind variable in list! "
2181,0, "Assertion Failure: #"
/          An assertion is a test internal to the precompilers that its
/          data structures are intact and OK.  An "assertion failure" then
/          is an indication that the precompiler has detected a bug in itself.
2182,0, "If yes, perform FIPS flagging"
/           ***          ****
2183,0, "Output #line compiler control lines"
/               *****
2184,0, "<common name prefix>"
2185,0, "          filename  *Prefix for generated common block names"
2186,0, "Generate K&R C or ANSI C"
/                 *****    ******
2187,0, "V7/V8 compatibility mode"
/        *****
2188,0, "If yes, allow multiple subprogs with SQL per source"
/           ***                               ***
2189,0, "If yes, allow automatic connect to ops$ accounts"
/           ***         
2190,0, "comp/comp-5 in Pro*COBOL"
/        ***********    *********
2191,0, "If yes, accept user defined VARCHAR group items"
/           ***                      *******
2192,0, "If yes, accept PIC N host variable declarations"
/           ***         *****
2193,0, "If yes, assume there is a SQLCODE variable"
/           ***                    *******
2194,0, "If yes, multi-threaded support is provided"
/           ***
2195,0, "If yes, unsafe null fetches are allowed"
/           ***
2196,0, "Valid host languages: Ada"
/                              ***
2197,0, "Valid host languages: C"
/                              *
2198,0, "Valid host languages: COBOL, COB74"
/                              ************
2199,0, "Valid host languages: FORTRAN"
/                              *******
2200,0, "Valid host languages: Pascal"
/                              ******
2201,0, "Valid host languages: PLI"
/                              ***
2202,0, "If integer, comp-1 as short and comp-2 as long"
/           *******  ******    *****     ******    ****
/
/ Command-Line HELP Strings
/  These must be kept in the same order as the options NAMES
/
// NLS DO Translate except words marked "***" [4200,4299]
//  Check computer manuals for translations of words marked "LLL"
4200, 0, "Obsolete in the current and future releases"
4201, 0, "If yes use ASA carriage control"
/            ***     ***
4202, 0, "If yes, assume SQLCODE variable exists"
/            ***         *******
4203, 0, "If yes, allow automatic connect to ops$ accounts"
/            ***                             ****
4204, 0, "Obsolete in the current and future releases"
4205, 0, "If yes generate ANSI C Code <kr_c/ansi_c>"
/            ***          **** *      *************
4206, 0, "Prefix for generated common block names [*]"
/                              LLLLLL LLLLL       ***
4207, 0, "If integer, comp-1 as short and comp-2 as long"
/            *******  LLLLLL    *****     LLLLLL    ****
4208, 0, "Generate comp-5 rather than comp variables"
/                  LLLLLL             LLLL
4209, 0, "Used to specify user defined configuration files"
4210, 0, "V7/V8 Compatibility mode"
/         *****
4211, 0, "Reserved for internal use only"
4212, 0, "Define a symbol for use in IFDEF"
/                                    *****
4213, 0, "Obsolete in the current and future releases"
4214, 0, "If yes, display errors to terminal"
/            ***           
4215, 0, "If yes, perform FIPS flagging"
/            ***          ****
4216, 0, "Format of input file lines <ansi/terminal>"
/                                     *****LLLLLLLL
4217, 0, "If yes, hold OraCursor (do not reassign) [*]"
/            ***       *********                   ***
4218, 0, "Host language"
4219, 0, "Input filename"
4220, 0, "Pathname for EXEC SQL INCLUDE files [*]"
/                      ****************       ***
4221, 0, "Obsolete in the current and future releases"
4222, 0, "*irecfm*"
/         ********
4223, 0, "Input file record length"
4224, 0, "Output #line compiler control lines"
4225, 0, "Delimiter for COBOL string literals <quote/apost>"
/                       LLLLL
4226, 0, "Left margin"
4227, 0, "List filename"
4228, 0, "*lrecfm*"
/         ********
4229, 0, "List file record length"
4230, 0, "List type <long/short/none> [*]"
/                                     ***
4231, 0, "Maximum length of literal string [*]"
/                                          ***
4232, 0, "Max nr of OraCursors in Cursor Cache [*]"
/                   **********                 ***
4233, 0, "If ansi, follow ANSI standards <oracle/ansi or iso/ansi14 or iso14>"
/            ****         ****            ***********    **********    *****
4234, 0, "If yes, allow multiple subprogs with SQL per source"
/            ***                               ***
4235, 0, "If yes, accept PIC N host variable declarations"
/            ***         *****
4236, 0, "Option specific to Stratus"
/                            LLLLLLL
4237, 0, "Output (generated code) filename"
4238, 0, "Use ORACA communications area [*]" 
/             *****           
4239, 0, "*orecfm*"
/         ********
4240, 0, "Output file record length"
4241, 0, "List file page length"
4242, 0, "Display Precompiler's version of PL/SQL"
/                                          ******
4243, 0, "Obsolete in the current and future releases"
4244, 0, "Obsolete in the current and future releases"
4245, 0, "Obsolete in the current and future releases"
4246, 0, "If yes, release OraCursor after execute [*]"
/            ***          *********               ***
4247, 0, "Right margin"
4248, 0, "If yes, generate FOUND error on SELECT [*]"
/            ***                          ****** ***
4249, 0, "SQL checking level <syntax or limited/semantics or full/none>"
/         ***                 ******    *****************    *********
4250, 0, "If yes, Ada tasking support is provided"
/            ***
4251, 0, "Reserved for internal use only"
4252, 0, "If yes, multi-threaded support is provided"
/            ***  LLLLLLLLLLLLLL
4253, 0, "If yes, unsafe null fetches are allowed"
/            ***
4254, 0, "Oracle logon user id and password"
/         ******
4255, 0, "If yes, accept user defined VARCHAR group items"
/            ***                      ******* 
4256, 0, "If yes, generate symbol cross references [*]"
/            ***                                   ***
/
